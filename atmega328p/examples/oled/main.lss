
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020a  00800100  00000e12  00000ea6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080030a  0080030a  000010b0  2**0
                  ALLOC
  3 .comment      00000024  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010d4  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000100  00000000  00000000  00001118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00001eaa  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000c01  00000000  00000000  000030c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00001cb3  00000000  00000000  00003cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000003d4  00000000  00000000  00005978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000818  00000000  00000000  00005d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000012b8  00000000  00000000  00006564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000000b8  00000000  00000000  0000781c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3

00000076 <.Loc.1>:
  76:	a0 e0       	ldi	r26, 0x00	; 0

00000078 <.Loc.2>:
  78:	b1 e0       	ldi	r27, 0x01	; 1

0000007a <.Loc.3>:
  7a:	e2 e1       	ldi	r30, 0x12	; 18

0000007c <.Loc.4>:
  7c:	fe e0       	ldi	r31, 0x0E	; 14

0000007e <.Loc.5>:
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.L__do_copy_data_start>

00000080 <.L__do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+

00000082 <.Loc.7>:
  82:	0d 92       	st	X+, r0

00000084 <.L__do_copy_data_start>:
  84:	aa 30       	cpi	r26, 0x0A	; 10

00000086 <.Loc.9>:
  86:	b1 07       	cpc	r27, r17

00000088 <.Loc.10>:
  88:	d9 f7       	brne	.-10     	; 0x80 <.L__do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3

0000008c <.Loc.1>:
  8c:	aa e0       	ldi	r26, 0x0A	; 10

0000008e <.Loc.2>:
  8e:	b3 e0       	ldi	r27, 0x03	; 3

00000090 <.Loc.3>:
  90:	01 c0       	rjmp	.+2      	; 0x94 <.Loc.5>

00000092 <.Loc.4>:
  92:	1d 92       	st	X+, r1

00000094 <.Loc.5>:
  94:	ad 30       	cpi	r26, 0x0D	; 13

00000096 <.Loc.6>:
  96:	b2 07       	cpc	r27, r18

00000098 <.Loc.7>:
  98:	e1 f7       	brne	.-8      	; 0x92 <.Loc.4>

0000009a <L0^A>:
  9a:	0e 94 23 05 	call	0xa46	; 0xa46 <main>
  9e:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <oledSendStart>:

/********************************************************************************
 Local FUnctions for sending the command/data
 ********************************************************************************/

void oledSendStart(uint8_t address){
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24

000000aa <.Loc.2>:

    
    i2c_tx_start(MASTER_TRANSMITTER);
  aa:	80 e0       	ldi	r24, 0x00	; 0

000000ac <.LVL1>:
  ac:	0e 94 90 04 	call	0x920	; 0x920 <i2c_tx_start>

000000b0 <.LVL2>:
    i2c_tx_address(address);
  b0:	8c 2f       	mov	r24, r28

000000b2 <.Loc.5>:
}
  b2:	cf 91       	pop	r28

000000b4 <.LVL3>:
    i2c_tx_address(address);
  b4:	0c 94 a6 04 	jmp	0x94c	; 0x94c <i2c_tx_address>

000000b8 <oledSendStop>:


void oledSendStop(void){

    i2c_tx_stop();
  b8:	0c 94 19 05 	jmp	0xa32	; 0xa32 <i2c_tx_stop>

000000bc <oledSendByte>:


void oledSendByte(uint8_t ch){

    
    i2c_tx_byte(ch);
  bc:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <i2c_tx_byte>

000000c0 <oledSendCommand>:
    
}


void oledSendCommand(uint8_t cmd){
  c0:	cf 93       	push	r28
  c2:	c8 2f       	mov	r28, r24

000000c4 <.Loc.15>:
    //oledSendStart(SSD1306_ADDRESS<<1);
    oledSendStart(SSD1306_ADDRESS);
  c4:	8c e3       	ldi	r24, 0x3C	; 60

000000c6 <.LVL9>:
  c6:	0e 94 53 00 	call	0xa6	; 0xa6 <oledSendStart>

000000ca <.LBB54>:
    i2c_tx_byte(ch);
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 d6 04 	call	0x9ac	; 0x9ac <i2c_tx_byte>

000000d0 <.LBB56>:
  d0:	8c 2f       	mov	r24, r28
  d2:	0e 94 d6 04 	call	0x9ac	; 0x9ac <i2c_tx_byte>

000000d6 <.LBB58>:
    oledSendByte(SSD1306_COMMAND);
    oledSendByte(cmd);
    oledSendStop();
}
  d6:	cf 91       	pop	r28

000000d8 <.LBB61>:
    i2c_tx_stop();
  d8:	0c 94 19 05 	jmp	0xa32	; 0xa32 <i2c_tx_stop>

000000dc <OLED_Clear>:
{
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29

000000e0 <.Loc.31>:
    oledSendCommand(SSD1306_SET_COLUMN_ADDR);
  e0:	81 e2       	ldi	r24, 0x21	; 33
  e2:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

000000e6 <.LVL15>:
    oledSendCommand(0);
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

000000ec <.LVL16>:
    oledSendCommand(127);
  ec:	8f e7       	ldi	r24, 0x7F	; 127
  ee:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

000000f2 <.LVL17>:
    oledSendCommand(SSD1306_SET_PAGE_ADDR);
  f2:	82 e2       	ldi	r24, 0x22	; 34
  f4:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

000000f8 <.LVL18>:
    oledSendCommand(0);
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

000000fe <.LVL19>:
    oledSendCommand(7);
  fe:	87 e0       	ldi	r24, 0x07	; 7
 100:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

00000104 <.LVL20>:
    oledSendStart(SSD1306_ADDRESS);
 104:	8c e3       	ldi	r24, 0x3C	; 60
 106:	0e 94 53 00 	call	0xa6	; 0xa6 <oledSendStart>

0000010a <.LBB62>:
    i2c_tx_byte(ch);
 10a:	80 e4       	ldi	r24, 0x40	; 64
 10c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <i2c_tx_byte>

00000110 <.LBB65>:
 110:	c0 e0       	ldi	r28, 0x00	; 0
 112:	d4 e0       	ldi	r29, 0x04	; 4

00000114 <.L6>:
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 d6 04 	call	0x9ac	; 0x9ac <i2c_tx_byte>

0000011a <.LBE66>:
    for (i=0; i<1024; i++)      // Write Zeros to clear the display
 11a:	21 97       	sbiw	r28, 0x01	; 1

0000011c <.LVL25>:
 11c:	d9 f7       	brne	.-10     	; 0x114 <.L6>

0000011e <.Loc.54>:
    oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 11e:	81 e2       	ldi	r24, 0x21	; 33
 120:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

00000124 <.LVL26>:
    oledSendCommand(0);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

0000012a <.LVL27>:
    oledSendCommand(127);
 12a:	8f e7       	ldi	r24, 0x7F	; 127
 12c:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

00000130 <.LVL28>:
    oledSendCommand(SSD1306_SET_PAGE_ADDR);
 130:	82 e2       	ldi	r24, 0x22	; 34
 132:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

00000136 <.LVL29>:
    oledSendCommand(0);
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

0000013c <.LVL30>:
    oledSendCommand(7);
 13c:	87 e0       	ldi	r24, 0x07	; 7
 13e:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

00000142 <.LVL31>:
    oledSendStart(SSD1306_ADDRESS);
 142:	8c e3       	ldi	r24, 0x3C	; 60
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <oledSendStart>

00000148 <.LBB68>:
    i2c_tx_byte(ch);
 148:	80 e4       	ldi	r24, 0x40	; 64

0000014a <.LBE68>:
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28

0000014e <.LBB71>:
    i2c_tx_byte(ch);
 14e:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <i2c_tx_byte>

00000152 <OLED_Init>:
    i2c_init();
 152:	0e 94 87 04 	call	0x90e	; 0x90e <i2c_init>

00000156 <.LVL35>:
    oledSendCommand(SSD1306_DISPLAY_OFF);
 156:	8e ea       	ldi	r24, 0xAE	; 174
 158:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

0000015c <.LVL36>:
    oledSendCommand(SSD1306_SET_DISPLAY_CLOCK_DIV_RATIO);
 15c:	85 ed       	ldi	r24, 0xD5	; 213
 15e:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

00000162 <.LVL37>:
    oledSendCommand(0x80);
 162:	80 e8       	ldi	r24, 0x80	; 128
 164:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

00000168 <.LVL38>:
    oledSendCommand(SSD1306_SET_MULTIPLEX_RATIO);
 168:	88 ea       	ldi	r24, 0xA8	; 168
 16a:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

0000016e <.LVL39>:
    oledSendCommand(0x3F);
 16e:	8f e3       	ldi	r24, 0x3F	; 63
 170:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

00000174 <.LVL40>:
    oledSendCommand(SSD1306_SET_DISPLAY_OFFSET);
 174:	83 ed       	ldi	r24, 0xD3	; 211
 176:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

0000017a <.LVL41>:
    oledSendCommand(0x0);
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

00000180 <.LVL42>:
    oledSendCommand(SSD1306_SET_START_LINE | 0x0);
 180:	80 e4       	ldi	r24, 0x40	; 64
 182:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

00000186 <.LVL43>:
    oledSendCommand(SSD1306_CHARGE_PUMP);
 186:	8d e8       	ldi	r24, 0x8D	; 141
 188:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

0000018c <.LVL44>:
    oledSendCommand(0x14);
 18c:	84 e1       	ldi	r24, 0x14	; 20
 18e:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

00000192 <.LVL45>:
    oledSendCommand(SSD1306_MEMORY_ADDR_MODE);
 192:	80 e2       	ldi	r24, 0x20	; 32
 194:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

00000198 <.LVL46>:
    oledSendCommand(0x00);
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

0000019e <.LVL47>:
    oledSendCommand(SSD1306_SET_SEGMENT_REMAP | 0x1);
 19e:	81 ea       	ldi	r24, 0xA1	; 161
 1a0:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

000001a4 <.LVL48>:
    oledSendCommand(SSD1306_COM_SCAN_DIR_DEC);
 1a4:	88 ec       	ldi	r24, 0xC8	; 200
 1a6:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

000001aa <.LVL49>:
    oledSendCommand(SSD1306_SET_COM_PINS);
 1aa:	8a ed       	ldi	r24, 0xDA	; 218
 1ac:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

000001b0 <.LVL50>:
    oledSendCommand(0x12);
 1b0:	82 e1       	ldi	r24, 0x12	; 18
 1b2:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

000001b6 <.LVL51>:
    oledSendCommand(SSD1306_SET_CONTRAST_CONTROL);
 1b6:	81 e8       	ldi	r24, 0x81	; 129
 1b8:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

000001bc <.LVL52>:
    oledSendCommand(0xCF);
 1bc:	8f ec       	ldi	r24, 0xCF	; 207
 1be:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

000001c2 <.LVL53>:
    oledSendCommand(SSD1306_SET_PRECHARGE_PERIOD);
 1c2:	89 ed       	ldi	r24, 0xD9	; 217
 1c4:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

000001c8 <.LVL54>:
    oledSendCommand(0xF1);
 1c8:	81 ef       	ldi	r24, 0xF1	; 241
 1ca:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

000001ce <.LVL55>:
    oledSendCommand(SSD1306_SET_VCOM_DESELECT);
 1ce:	8b ed       	ldi	r24, 0xDB	; 219
 1d0:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

000001d4 <.LVL56>:
    oledSendCommand(0x40);
 1d4:	80 e4       	ldi	r24, 0x40	; 64
 1d6:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

000001da <.LVL57>:
    oledSendCommand(SSD1306_DISPLAY_ALL_ON_RESUME);
 1da:	84 ea       	ldi	r24, 0xA4	; 164
 1dc:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

000001e0 <.LVL58>:
    oledSendCommand(SSD1306_NORMAL_DISPLAY);
 1e0:	86 ea       	ldi	r24, 0xA6	; 166
 1e2:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

000001e6 <.LVL59>:
    oledSendCommand(SSD1306_DISPLAY_ON);
 1e6:	8f ea       	ldi	r24, 0xAF	; 175
 1e8:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

000001ec <.LVL60>:
    OLED_Clear();  /* Clear the complete LCD during init */
 1ec:	0c 94 6e 00 	jmp	0xdc	; 0xdc <OLED_Clear>

000001f0 <OLED_SetCursor.part.0>:
void OLED_SetCursor(uint8_t lineNumber,uint8_t cursorPosition)
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	c8 2f       	mov	r28, r24
 1f6:	d6 2f       	mov	r29, r22

000001f8 <.Loc.96>:
        OledLineNum=lineNumber;   /* Save the specified line number */
 1f8:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <OledLineNum>

000001fc <.Loc.98>:
        OledCursorPos=cursorPosition; /* Save the specified cursor position */
 1fc:	60 93 0c 03 	sts	0x030C, r22	; 0x80030c <OledCursorPos>

00000200 <.Loc.100>:
        oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 200:	81 e2       	ldi	r24, 0x21	; 33

00000202 <.LVL63>:
 202:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

00000206 <.LVL64>:
        oledSendCommand(cursorPosition);
 206:	8d 2f       	mov	r24, r29
 208:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

0000020c <.LVL65>:
        oledSendCommand(127);
 20c:	8f e7       	ldi	r24, 0x7F	; 127
 20e:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

00000212 <.LVL66>:
        oledSendCommand(SSD1306_SET_PAGE_ADDR);
 212:	82 e2       	ldi	r24, 0x22	; 34
 214:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

00000218 <.LVL67>:
        oledSendCommand(lineNumber);
 218:	8c 2f       	mov	r24, r28
 21a:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

0000021e <.LVL68>:
        oledSendCommand(7);
 21e:	87 e0       	ldi	r24, 0x07	; 7
 220:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

00000224 <.LVL69>:
        oledSendStart(SSD1306_ADDRESS);
 224:	8c e3       	ldi	r24, 0x3C	; 60
 226:	0e 94 53 00 	call	0xa6	; 0xa6 <oledSendStart>

0000022a <.LBB72>:
    i2c_tx_byte(ch);
 22a:	80 e4       	ldi	r24, 0x40	; 64

0000022c <.LBE72>:
}
 22c:	df 91       	pop	r29

0000022e <.LVL71>:
 22e:	cf 91       	pop	r28

00000230 <.LBB75>:
    i2c_tx_byte(ch);
 230:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <i2c_tx_byte>

00000234 <OLED_SetCursor>:
    if((lineNumber <= C_OledLastLine_U8) && (cursorPosition <= 127))
 234:	88 30       	cpi	r24, 0x08	; 8
 236:	18 f4       	brcc	.+6      	; 0x23e <.L10>

00000238 <.Loc.117>:
 238:	67 ff       	sbrs	r22, 7
 23a:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <OLED_SetCursor.part.0>

0000023e <.L10>:
}
 23e:	08 95       	ret

00000240 <OLED_ScrollMessage>:
{
 240:	6f 92       	push	r6
 242:	7f 92       	push	r7
 244:	8f 92       	push	r8
 246:	9f 92       	push	r9
 248:	af 92       	push	r10
 24a:	bf 92       	push	r11
 24c:	cf 92       	push	r12
 24e:	df 92       	push	r13
 250:	ef 92       	push	r14
 252:	ff 92       	push	r15
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	08 2f       	mov	r16, r24
 25e:	6b 01       	movw	r12, r22

00000260 <.Loc.121>:
    if(lineNum > 7)
 260:	88 30       	cpi	r24, 0x08	; 8
 262:	08 f0       	brcs	.+2      	; 0x266 <.L13>

00000264 <.Loc.124>:
        lineNum = 0; // Select first line if the lineNumberToStartDisplay is out of range
 264:	00 e0       	ldi	r16, 0x00	; 0

00000266 <.L13>:
    for(i=0;strptr[i];i++)
 266:	a1 2c       	mov	r10, r1
 268:	25 e0       	ldi	r18, 0x05	; 5
 26a:	82 2e       	mov	r8, r18

0000026c <.L14>:
 26c:	f6 01       	movw	r30, r12
 26e:	ea 0d       	add	r30, r10
 270:	f1 1d       	adc	r31, r1

00000272 <.Loc.129>:
 272:	80 81       	ld	r24, Z
 274:	81 11       	cpse	r24, r1
 276:	0f c0       	rjmp	.+30     	; 0x296 <.L21>

00000278 <.Loc.130>:
}
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16

00000280 <.LVL79>:
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	df 90       	pop	r13
 286:	cf 90       	pop	r12

00000288 <.LVL80>:
 288:	bf 90       	pop	r11
 28a:	af 90       	pop	r10

0000028c <.LVL81>:
 28c:	9f 90       	pop	r9
 28e:	8f 90       	pop	r8
 290:	7f 90       	pop	r7
 292:	6f 90       	pop	r6
 294:	08 95       	ret

00000296 <.L21>:
 296:	96 e0       	ldi	r25, 0x06	; 6
 298:	b9 2e       	mov	r11, r25

0000029a <.Loc.135>:
            for(j=0;(strptr[i+j] && (cursor<128));j++)
 29a:	7f 01       	movw	r14, r30

0000029c <.L20>:
            OLED_SetCursor(lineNum,6-k);     //Move the Cursor to first line
 29c:	6b 2d       	mov	r22, r11
 29e:	80 2f       	mov	r24, r16
 2a0:	0e 94 1a 01 	call	0x234	; 0x234 <OLED_SetCursor>

000002a4 <.LVL84>:
            cursor = 6-k;
 2a4:	1b 2d       	mov	r17, r11

000002a6 <.Loc.140>:
            for(j=0;(strptr[i+j] && (cursor<128));j++)
 2a6:	91 2c       	mov	r9, r1

000002a8 <.L15>:
 2a8:	f7 01       	movw	r30, r14
 2aa:	e9 0d       	add	r30, r9
 2ac:	f1 1d       	adc	r31, r1
 2ae:	c0 81       	ld	r28, Z

000002b0 <.Loc.143>:
 2b0:	cc 23       	and	r28, r28
 2b2:	11 f0       	breq	.+4      	; 0x2b8 <.L18>

000002b4 <.Loc.144>:
 2b4:	17 ff       	sbrs	r17, 7
 2b6:	0e c0       	rjmp	.+28     	; 0x2d4 <.L19>

000002b8 <.L18>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	99 ef       	ldi	r25, 0xF9	; 249
 2bc:	20 e0       	ldi	r18, 0x00	; 0

000002be <.L1^B1>:
 2be:	81 50       	subi	r24, 0x01	; 1
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	20 40       	sbci	r18, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <.L1^B1>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <L0^A>

000002c8 <L0^A>:
	...

000002ca <.LBE79>:
        for(k=0;k<6;k++)
 2ca:	ba 94       	dec	r11

000002cc <.LVL88>:
 2cc:	b1 10       	cpse	r11, r1
 2ce:	e6 cf       	rjmp	.-52     	; 0x29c <.L20>

000002d0 <.Loc.159>:
    for(i=0;strptr[i];i++)
 2d0:	a3 94       	inc	r10

000002d2 <.Loc.161>:
 2d2:	cc cf       	rjmp	.-104    	; 0x26c <.L14>

000002d4 <.L19>:
                ch = strptr[i+j]-0x20;
 2d4:	c0 52       	subi	r28, 0x20	; 32

000002d6 <.LVL91>:
 2d6:	c8 9d       	mul	r28, r8
 2d8:	e0 01       	movw	r28, r0
 2da:	11 24       	eor	r1, r1

000002dc <.LVL92>:
 2dc:	c0 50       	subi	r28, 0x00	; 0
 2de:	df 4f       	sbci	r29, 0xFF	; 255
 2e0:	85 e0       	ldi	r24, 0x05	; 5
 2e2:	68 2e       	mov	r6, r24
 2e4:	61 0e       	add	r6, r17

000002e6 <.L17>:
    i2c_tx_byte(ch);
 2e6:	89 91       	ld	r24, Y+

000002e8 <.LVL94>:
 2e8:	0e 94 d6 04 	call	0x9ac	; 0x9ac <i2c_tx_byte>

000002ec <.LBE80>:
                    cursor++;
 2ec:	71 2e       	mov	r7, r17

000002ee <.Loc.174>:
 2ee:	1f 5f       	subi	r17, 0xFF	; 255

000002f0 <.Loc.175>:
                for(l=0;(l<5) && (cursor<128);l++)//Display first 16 Chars or till Null char is reached
 2f0:	16 15       	cp	r17, r6
 2f2:	11 f0       	breq	.+4      	; 0x2f8 <.L16>

000002f4 <.Loc.178>:
 2f4:	17 ff       	sbrs	r17, 7
 2f6:	f7 cf       	rjmp	.-18     	; 0x2e6 <.L17>

000002f8 <.L16>:
    i2c_tx_byte(ch);
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	0e 94 d6 04 	call	0x9ac	; 0x9ac <i2c_tx_byte>

000002fe <.LBB84>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fe:	25 e3       	ldi	r18, 0x35	; 53

00000300 <.L1^B2>:
 300:	2a 95       	dec	r18
 302:	f1 f7       	brne	.-4      	; 0x300 <.L1^B2>
	...

00000306 <.LBE87>:
                cursor++;
 306:	12 e0       	ldi	r17, 0x02	; 2

00000308 <.LVL100>:
 308:	17 0d       	add	r17, r7

0000030a <.LVL101>:
            for(j=0;(strptr[i+j] && (cursor<128));j++)
 30a:	93 94       	inc	r9

0000030c <.Loc.199>:
 30c:	cd cf       	rjmp	.-102    	; 0x2a8 <.L15>

0000030e <OLED_GoToLine>:
    if(lineNumber<8)
 30e:	88 30       	cpi	r24, 0x08	; 8
 310:	28 f4       	brcc	.+10     	; 0x31c <.L27>

00000312 <.Loc.203>:
        OledLineNum = lineNumber;
 312:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <OledLineNum>

00000316 <.Loc.205>:
        OLED_SetCursor(OledLineNum,0);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	0c 94 1a 01 	jmp	0x234	; 0x234 <OLED_SetCursor>

0000031c <.L27>:
}
 31c:	08 95       	ret

0000031e <OLED_GoToNextLine>:
    OledLineNum++;
 31e:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <OledLineNum>
 322:	8f 5f       	subi	r24, 0xFF	; 255

00000324 <.Loc.211>:
    OledLineNum = OledLineNum&0x07;
 324:	87 70       	andi	r24, 0x07	; 7

00000326 <.Loc.212>:
 326:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <OledLineNum>

0000032a <.Loc.213>:
    OLED_SetCursor(OledLineNum,0); /* Finally move it to next line */
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	0c 94 1a 01 	jmp	0x234	; 0x234 <OLED_SetCursor>

00000330 <OLED_DisplayChar>:
{
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	c8 2f       	mov	r28, r24

00000338 <.Loc.216>:
    if(((OledCursorPos+FONT_SIZE)>=128) || (ch=='\n'))
 338:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <OledCursorPos>

0000033c <.LVL108>:
 33c:	8b 37       	cpi	r24, 0x7B	; 123
 33e:	f0 f4       	brcc	.+60     	; 0x37c <.L31>

00000340 <.Loc.220>:
 340:	ca 30       	cpi	r28, 0x0A	; 10
 342:	e1 f0       	breq	.+56     	; 0x37c <.L31>

00000344 <.L33>:
        ch = ch-0x20; // As the lookup table starts from Space(0x20)
 344:	c0 52       	subi	r28, 0x20	; 32

00000346 <.LVL110>:
 346:	85 e0       	ldi	r24, 0x05	; 5
 348:	c8 9f       	mul	r28, r24
 34a:	e0 01       	movw	r28, r0
 34c:	11 24       	eor	r1, r1

0000034e <.LVL111>:
 34e:	c0 50       	subi	r28, 0x00	; 0
 350:	df 4f       	sbci	r29, 0xFF	; 255

00000352 <.Loc.226>:
    uint8_t dat,i=0;
 352:	10 e0       	ldi	r17, 0x00	; 0

00000354 <.L32>:
    i2c_tx_byte(ch);
 354:	89 91       	ld	r24, Y+

00000356 <.LVL113>:
 356:	0e 94 d6 04 	call	0x9ac	; 0x9ac <i2c_tx_byte>

0000035a <.LBE96>:
            OledCursorPos++;
 35a:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <OledCursorPos>
 35e:	8f 5f       	subi	r24, 0xFF	; 255
 360:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <OledCursorPos>

00000364 <.Loc.236>:
            i++;
 364:	1f 5f       	subi	r17, 0xFF	; 255

00000366 <.Loc.238>:
            if(i==FONT_SIZE) /* Exit the loop if End of char is encountered */
 366:	15 30       	cpi	r17, 0x05	; 5
 368:	a9 f7       	brne	.-22     	; 0x354 <.L32>

0000036a <.LBB98>:
    i2c_tx_byte(ch);
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <i2c_tx_byte>

00000370 <.LBE98>:
                OledCursorPos++;
 370:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <OledCursorPos>
 374:	8f 5f       	subi	r24, 0xFF	; 255
 376:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <OledCursorPos>

0000037a <.LBE94>:
}
 37a:	04 c0       	rjmp	.+8      	; 0x384 <.L30>

0000037c <.L31>:
        OLED_GoToNextLine();
 37c:	0e 94 8f 01 	call	0x31e	; 0x31e <OLED_GoToNextLine>

00000380 <.LVL120>:
    if(ch!='\n') /* TODO */
 380:	ca 30       	cpi	r28, 0x0A	; 10
 382:	01 f7       	brne	.-64     	; 0x344 <.L33>

00000384 <.L30>:
}
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	1f 91       	pop	r17
 38a:	08 95       	ret

0000038c <OLED_DisplayString>:
{
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	ec 01       	movw	r28, r24

00000392 <.L40>:
    while(*ptr)
 392:	89 91       	ld	r24, Y+

00000394 <.LVL124>:
 394:	81 11       	cpse	r24, r1
 396:	03 c0       	rjmp	.+6      	; 0x39e <.L41>

00000398 <.Loc.259>:
}
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28

0000039c <.LVL125>:
 39c:	08 95       	ret

0000039e <.L41>:
        OLED_DisplayChar(*ptr++);
 39e:	0e 94 98 01 	call	0x330	; 0x330 <OLED_DisplayChar>

000003a2 <.LVL127>:
 3a2:	f7 cf       	rjmp	.-18     	; 0x392 <.L40>

000003a4 <OLED_DisplayNumber>:
{
 3a4:	2f 92       	push	r2
 3a6:	3f 92       	push	r3
 3a8:	4f 92       	push	r4
 3aa:	5f 92       	push	r5
 3ac:	6f 92       	push	r6
 3ae:	7f 92       	push	r7
 3b0:	8f 92       	push	r8
 3b2:	9f 92       	push	r9
 3b4:	af 92       	push	r10
 3b6:	bf 92       	push	r11
 3b8:	cf 92       	push	r12
 3ba:	df 92       	push	r13
 3bc:	ef 92       	push	r14
 3be:	ff 92       	push	r15
 3c0:	0f 93       	push	r16
 3c2:	1f 93       	push	r17
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
 3cc:	2a 97       	sbiw	r28, 0x0a	; 10
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	f8 94       	cli
 3d2:	de bf       	out	0x3e, r29	; 62
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	cd bf       	out	0x3d, r28	; 61
 3d8:	78 2e       	mov	r7, r24
 3da:	4a 01       	movw	r8, r20
 3dc:	5b 01       	movw	r10, r22
 3de:	12 2f       	mov	r17, r18

000003e0 <.LVL129>:
    if(C_BINARY_U8 == v_numericSystem_u8)
 3e0:	82 e0       	ldi	r24, 0x02	; 2

000003e2 <.LVL130>:
 3e2:	78 12       	cpse	r7, r24
 3e4:	3a c0       	rjmp	.+116    	; 0x45a <.L43>
 3e6:	02 2f       	mov	r16, r18
 3e8:	10 e0       	ldi	r17, 0x00	; 0

000003ea <.Loc.269>:
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
 3ea:	ee 24       	eor	r14, r14
 3ec:	e3 94       	inc	r14
 3ee:	f1 2c       	mov	r15, r1

000003f0 <.L44>:
        while(v_numOfDigitsToDisplay_u8!=0)
 3f0:	01 50       	subi	r16, 0x01	; 1
 3f2:	11 09       	sbc	r17, r1
 3f4:	c8 f4       	brcc	.+50     	; 0x428 <.L46>

000003f6 <.L42>:
}
 3f6:	2a 96       	adiw	r28, 0x0a	; 10
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
 3fc:	de bf       	out	0x3e, r29	; 62
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	cd bf       	out	0x3d, r28	; 61
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	ff 90       	pop	r15
 40c:	ef 90       	pop	r14
 40e:	df 90       	pop	r13
 410:	cf 90       	pop	r12
 412:	bf 90       	pop	r11
 414:	af 90       	pop	r10
 416:	9f 90       	pop	r9
 418:	8f 90       	pop	r8
 41a:	7f 90       	pop	r7

0000041c <.LVL133>:
 41c:	6f 90       	pop	r6
 41e:	5f 90       	pop	r5
 420:	4f 90       	pop	r4
 422:	3f 90       	pop	r3
 424:	2f 90       	pop	r2
 426:	08 95       	ret

00000428 <.L46>:
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
 428:	a7 01       	movw	r20, r14
 42a:	00 2e       	mov	r0, r16
 42c:	02 c0       	rjmp	.+4      	; 0x432 <.L2^B1>

0000042e <.L1^B3>:
 42e:	44 0f       	add	r20, r20
 430:	55 1f       	adc	r21, r21

00000432 <.L2^B1>:
 432:	0a 94       	dec	r0
 434:	e2 f7       	brpl	.-8      	; 0x42e <.L1^B3>
 436:	05 2e       	mov	r0, r21
 438:	00 0c       	add	r0, r0
 43a:	66 0b       	sbc	r22, r22
 43c:	77 0b       	sbc	r23, r23
 43e:	48 21       	and	r20, r8
 440:	59 21       	and	r21, r9
 442:	6a 21       	and	r22, r10
 444:	7b 21       	and	r23, r11
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	45 2b       	or	r20, r21
 44a:	46 2b       	or	r20, r22
 44c:	47 2b       	or	r20, r23
 44e:	09 f4       	brne	.+2      	; 0x452 <.L45>
 450:	80 e0       	ldi	r24, 0x00	; 0

00000452 <.L45>:
            OLED_DisplayChar(util_Dec2Ascii(i));
 452:	80 5d       	subi	r24, 0xD0	; 208
 454:	0e 94 98 01 	call	0x330	; 0x330 <OLED_DisplayChar>

00000458 <.LVL135>:
            v_numOfDigitsToDisplay_u8--;
 458:	cb cf       	rjmp	.-106    	; 0x3f0 <.L44>

0000045a <.L43>:
    else if(v_number_u32==0)
 45a:	81 14       	cp	r8, r1
 45c:	91 04       	cpc	r9, r1
 45e:	a1 04       	cpc	r10, r1
 460:	b1 04       	cpc	r11, r1
 462:	69 f1       	breq	.+90     	; 0x4be <.L61>
 464:	fe 01       	movw	r30, r28
 466:	31 96       	adiw	r30, 0x01	; 1
 468:	7f 01       	movw	r14, r30
 46a:	6f 01       	movw	r12, r30

0000046c <.LBB102>:
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
 46c:	00 e0       	ldi	r16, 0x00	; 0

0000046e <.Loc.282>:
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
 46e:	27 2c       	mov	r2, r7
 470:	31 2c       	mov	r3, r1
 472:	51 2c       	mov	r5, r1
 474:	41 2c       	mov	r4, r1

00000476 <.L49>:
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
 476:	10 17       	cp	r17, r16
 478:	31 f1       	breq	.+76     	; 0x4c6 <.L57>

0000047a <.Loc.285>:
            if(v_number_u32!=0)
 47a:	81 14       	cp	r8, r1
 47c:	91 04       	cpc	r9, r1
 47e:	a1 04       	cpc	r10, r1
 480:	b1 04       	cpc	r11, r1
 482:	f9 f0       	breq	.+62     	; 0x4c2 <.L52>

00000484 <.Loc.287>:
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
 484:	68 2c       	mov	r6, r8
 486:	c5 01       	movw	r24, r10
 488:	b4 01       	movw	r22, r8
 48a:	a2 01       	movw	r20, r4
 48c:	91 01       	movw	r18, r2
 48e:	0e 94 cb 06 	call	0xd96	; 0xd96 <__udivmodsi4>
 492:	49 01       	movw	r8, r18

00000494 <.LVL138>:
 494:	5a 01       	movw	r10, r20
 496:	72 9e       	mul	r7, r18
 498:	60 18       	sub	r6, r0
 49a:	11 24       	eor	r1, r1

0000049c <.Loc.290>:
 49c:	f6 01       	movw	r30, r12
 49e:	60 82       	st	Z, r6

000004a0 <.L53>:
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
 4a0:	0f 5f       	subi	r16, 0xFF	; 255

000004a2 <.Loc.294>:
 4a2:	ff ef       	ldi	r31, 0xFF	; 255
 4a4:	cf 1a       	sub	r12, r31
 4a6:	df 0a       	sbc	r13, r31
 4a8:	e6 cf       	rjmp	.-52     	; 0x476 <.L49>

000004aa <.L51>:
            OLED_DisplayChar('0');
 4aa:	80 e3       	ldi	r24, 0x30	; 48
 4ac:	0e 94 98 01 	call	0x330	; 0x330 <OLED_DisplayChar>

000004b0 <.LVL142>:
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
 4b0:	0f 5f       	subi	r16, 0xFF	; 255

000004b2 <.L48>:
 4b2:	01 17       	cp	r16, r17
 4b4:	09 f4       	brne	.+2      	; 0x4b8 <.Loc.301>

000004b6 <L0^A>:
 4b6:	9f cf       	rjmp	.-194    	; 0x3f6 <.L42>

000004b8 <.Loc.301>:
 4b8:	0a 30       	cpi	r16, 0x0A	; 10
 4ba:	b9 f7       	brne	.-18     	; 0x4aa <.L51>
 4bc:	9c cf       	rjmp	.-200    	; 0x3f6 <.L42>

000004be <.L61>:
 4be:	00 e0       	ldi	r16, 0x00	; 0
 4c0:	f8 cf       	rjmp	.-16     	; 0x4b2 <.L48>

000004c2 <.L52>:
            else if( (v_numOfDigitsToDisplay_u8 == C_DisplayDefaultDigits_U8) ||
 4c2:	1b 30       	cpi	r17, 0x0B	; 11
 4c4:	80 f0       	brcs	.+32     	; 0x4e6 <.L54>

000004c6 <.L57>:
 4c6:	0e 0d       	add	r16, r14
 4c8:	1f 2d       	mov	r17, r15
 4ca:	11 1d       	adc	r17, r1

000004cc <.L55>:
        while(i!=0)
 4cc:	0e 15       	cp	r16, r14
 4ce:	1f 05       	cpc	r17, r15
 4d0:	09 f4       	brne	.+2      	; 0x4d4 <.Loc.306>

000004d2 <L0^A>:
 4d2:	91 cf       	rjmp	.-222    	; 0x3f6 <.L42>

000004d4 <.Loc.306>:
            OLED_DisplayChar(util_Hex2Ascii(a[i-1]));
 4d4:	f8 01       	movw	r30, r16
 4d6:	82 91       	ld	r24, -Z
 4d8:	8f 01       	movw	r16, r30

000004da <.Loc.308>:
 4da:	8a 30       	cpi	r24, 0x0A	; 10
 4dc:	38 f0       	brcs	.+14     	; 0x4ec <.L58>
 4de:	89 5c       	subi	r24, 0xC9	; 201

000004e0 <.L59>:
 4e0:	0e 94 98 01 	call	0x330	; 0x330 <OLED_DisplayChar>

000004e4 <.LVL147>:
            i--;
 4e4:	f3 cf       	rjmp	.-26     	; 0x4cc <.L55>

000004e6 <.L54>:
                a[i]=0;
 4e6:	f6 01       	movw	r30, r12
 4e8:	10 82       	st	Z, r1
 4ea:	da cf       	rjmp	.-76     	; 0x4a0 <.L53>

000004ec <.L58>:
            OLED_DisplayChar(util_Hex2Ascii(a[i-1]));
 4ec:	80 5d       	subi	r24, 0xD0	; 208
 4ee:	f8 cf       	rjmp	.-16     	; 0x4e0 <.L59>

000004f0 <OLED_DisplayFloatNumber>:
{
 4f0:	cf 92       	push	r12
 4f2:	df 92       	push	r13
 4f4:	ef 92       	push	r14
 4f6:	ff 92       	push	r15
 4f8:	0f 93       	push	r16
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	00 d0       	rcall	.+0      	; 0x502 <L0^A>

00000502 <L0^A>:
 502:	00 d0       	rcall	.+0      	; 0x504 <L0^A>

00000504 <L0^A>:
 504:	00 d0       	rcall	.+0      	; 0x506 <L0^A>

00000506 <L0^A>:
 506:	cd b7       	in	r28, 0x3d	; 61
 508:	de b7       	in	r29, 0x3e	; 62
 50a:	8b 01       	movw	r16, r22
 50c:	8e 83       	std	Y+6, r24	; 0x06
 50e:	9d 83       	std	Y+5, r25	; 0x05

00000510 <.Loc.315>:
    v_temp_u32 = (uint32_t) v_floatNum_f32;
 510:	69 83       	std	Y+1, r22	; 0x01
 512:	1a 83       	std	Y+2, r17	; 0x02
 514:	8b 83       	std	Y+3, r24	; 0x03
 516:	9c 83       	std	Y+4, r25	; 0x04
 518:	69 81       	ldd	r22, Y+1	; 0x01
 51a:	7a 81       	ldd	r23, Y+2	; 0x02
 51c:	8b 81       	ldd	r24, Y+3	; 0x03
 51e:	9c 81       	ldd	r25, Y+4	; 0x04

00000520 <.LVL151>:
 520:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fixunssfsi>
 524:	6b 01       	movw	r12, r22
 526:	7c 01       	movw	r14, r24

00000528 <.LVL153>:
    OLED_DisplayNumber(C_DECIMAL_U8,v_temp_u32,C_DisplayDefaultDigits_U8);
 528:	2f ef       	ldi	r18, 0xFF	; 255
 52a:	ab 01       	movw	r20, r22
 52c:	bc 01       	movw	r22, r24

0000052e <.LVL154>:
 52e:	8a e0       	ldi	r24, 0x0A	; 10
 530:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <OLED_DisplayNumber>

00000534 <.LVL155>:
    OLED_DisplayChar('.');
 534:	8e e2       	ldi	r24, 0x2E	; 46
 536:	0e 94 98 01 	call	0x330	; 0x330 <OLED_DisplayChar>

0000053a <.LVL156>:
    v_floatNum_f32 = v_floatNum_f32 - v_temp_u32;
 53a:	b6 01       	movw	r22, r12
 53c:	c7 01       	movw	r24, r14
 53e:	0e 94 d0 05 	call	0xba0	; 0xba0 <__floatunsisf>

00000542 <.Loc.325>:
 542:	9b 01       	movw	r18, r22
 544:	ac 01       	movw	r20, r24
 546:	09 83       	std	Y+1, r16	; 0x01
 548:	1a 83       	std	Y+2, r17	; 0x02

0000054a <.Loc.326>:
 54a:	8e 81       	ldd	r24, Y+6	; 0x06
 54c:	8b 83       	std	Y+3, r24	; 0x03
 54e:	8d 81       	ldd	r24, Y+5	; 0x05
 550:	8c 83       	std	Y+4, r24	; 0x04
 552:	69 81       	ldd	r22, Y+1	; 0x01
 554:	7a 81       	ldd	r23, Y+2	; 0x02
 556:	8b 81       	ldd	r24, Y+3	; 0x03
 558:	9c 81       	ldd	r25, Y+4	; 0x04
 55a:	0e 94 34 05 	call	0xa68	; 0xa68 <__subsf3>

0000055e <.Loc.327>:
    v_temp_u32 = v_floatNum_f32 * 1000000;
 55e:	20 e0       	ldi	r18, 0x00	; 0
 560:	34 e2       	ldi	r19, 0x24	; 36
 562:	44 e7       	ldi	r20, 0x74	; 116
 564:	59 e4       	ldi	r21, 0x49	; 73
 566:	69 83       	std	Y+1, r22	; 0x01
 568:	7a 83       	std	Y+2, r23	; 0x02

0000056a <.Loc.328>:
 56a:	8b 83       	std	Y+3, r24	; 0x03
 56c:	9c 83       	std	Y+4, r25	; 0x04
 56e:	69 81       	ldd	r22, Y+1	; 0x01
 570:	7a 81       	ldd	r23, Y+2	; 0x02
 572:	8b 81       	ldd	r24, Y+3	; 0x03
 574:	9c 81       	ldd	r25, Y+4	; 0x04
 576:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__mulsf3>

0000057a <.Loc.329>:
 57a:	69 83       	std	Y+1, r22	; 0x01
 57c:	7a 83       	std	Y+2, r23	; 0x02
 57e:	8b 83       	std	Y+3, r24	; 0x03
 580:	9c 83       	std	Y+4, r25	; 0x04
 582:	69 81       	ldd	r22, Y+1	; 0x01
 584:	7a 81       	ldd	r23, Y+2	; 0x02
 586:	8b 81       	ldd	r24, Y+3	; 0x03
 588:	9c 81       	ldd	r25, Y+4	; 0x04

0000058a <.Loc.331>:
 58a:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fixunssfsi>

0000058e <.Loc.332>:
 58e:	ab 01       	movw	r20, r22
 590:	bc 01       	movw	r22, r24

00000592 <.Loc.333>:
    OLED_DisplayNumber(C_DECIMAL_U8,v_temp_u32,C_DisplayDefaultDigits_U8);
 592:	2f ef       	ldi	r18, 0xFF	; 255
 594:	8a e0       	ldi	r24, 0x0A	; 10

00000596 <.Loc.334>:
}
 596:	26 96       	adiw	r28, 0x06	; 6

00000598 <.Loc.335>:
 598:	0f b6       	in	r0, 0x3f	; 63
 59a:	f8 94       	cli
 59c:	de bf       	out	0x3e, r29	; 62
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	cd bf       	out	0x3d, r28	; 61

000005a2 <.Loc.336>:
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28

000005a6 <.Loc.337>:
 5a6:	1f 91       	pop	r17

000005a8 <.Loc.338>:
 5a8:	0f 91       	pop	r16

000005aa <.Loc.339>:
 5aa:	ff 90       	pop	r15
 5ac:	ef 90       	pop	r14
 5ae:	df 90       	pop	r13
 5b0:	cf 90       	pop	r12

000005b2 <.Loc.340>:
    OLED_DisplayNumber(C_DECIMAL_U8,v_temp_u32,C_DisplayDefaultDigits_U8);
 5b2:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <OLED_DisplayNumber>

000005b6 <OLED_Printf>:
{
 5b6:	8f 92       	push	r8
 5b8:	9f 92       	push	r9
 5ba:	af 92       	push	r10
 5bc:	bf 92       	push	r11
 5be:	cf 92       	push	r12
 5c0:	df 92       	push	r13
 5c2:	ef 92       	push	r14
 5c4:	ff 92       	push	r15
 5c6:	0f 93       	push	r16
 5c8:	1f 93       	push	r17
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	00 d0       	rcall	.+0      	; 0x5d0 <L0^A>

000005d0 <L0^A>:
 5d0:	00 d0       	rcall	.+0      	; 0x5d2 <L0^A>

000005d2 <L0^A>:
 5d2:	cd b7       	in	r28, 0x3d	; 61
 5d4:	de b7       	in	r29, 0x3e	; 62
 5d6:	fe 01       	movw	r30, r28
 5d8:	73 96       	adiw	r30, 0x13	; 19
 5da:	a1 90       	ld	r10, Z+
 5dc:	b1 90       	ld	r11, Z+

000005de <.Loc.343>:
    va_start(argp, argList);
 5de:	8f 01       	movw	r16, r30

000005e0 <.LVL169>:
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
 5e0:	5a e0       	ldi	r21, 0x0A	; 10
 5e2:	c5 2e       	mov	r12, r21

000005e4 <.L64>:
    for(ptr = argList; *ptr != '\0'; ptr++)
 5e4:	f5 01       	movw	r30, r10
 5e6:	80 81       	ld	r24, Z

000005e8 <.Loc.357>:
 5e8:	81 11       	cpse	r24, r1
 5ea:	11 c0       	rjmp	.+34     	; 0x60e <.L90>

000005ec <.Loc.358>:
}
 5ec:	0f 90       	pop	r0
 5ee:	0f 90       	pop	r0
 5f0:	0f 90       	pop	r0
 5f2:	0f 90       	pop	r0
 5f4:	df 91       	pop	r29
 5f6:	cf 91       	pop	r28
 5f8:	1f 91       	pop	r17
 5fa:	0f 91       	pop	r16

000005fc <.LVL171>:
 5fc:	ff 90       	pop	r15
 5fe:	ef 90       	pop	r14
 600:	df 90       	pop	r13
 602:	cf 90       	pop	r12
 604:	bf 90       	pop	r11
 606:	af 90       	pop	r10

00000608 <.LVL172>:
 608:	9f 90       	pop	r9
 60a:	8f 90       	pop	r8
 60c:	08 95       	ret

0000060e <.L90>:
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
 60e:	85 32       	cpi	r24, 0x25	; 37
 610:	09 f0       	breq	.+2      	; 0x614 <L0^A+0x2>

00000612 <L0^A>:
 612:	d0 c0       	rjmp	.+416    	; 0x7b4 <.L65>
 614:	75 01       	movw	r14, r10
 616:	8f ef       	ldi	r24, 0xFF	; 255
 618:	e8 1a       	sub	r14, r24
 61a:	f8 0a       	sbc	r15, r24

0000061c <.LVL174>:
            ch = *ptr;
 61c:	d5 01       	movw	r26, r10
 61e:	11 96       	adiw	r26, 0x01	; 1
 620:	ec 91       	ld	r30, X

00000622 <.LVL175>:
            if((ch>=0x30) && (ch<=0x39))
 622:	80 ed       	ldi	r24, 0xD0	; 208
 624:	8e 0f       	add	r24, r30

00000626 <.Loc.369>:
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
 626:	dd 24       	eor	r13, r13
 628:	da 94       	dec	r13

0000062a <.Loc.370>:
            if((ch>=0x30) && (ch<=0x39))
 62a:	8a 30       	cpi	r24, 0x0A	; 10
 62c:	98 f4       	brcc	.+38     	; 0x654 <.L67>

0000062e <.Loc.371>:
                v_numOfDigitsToDisp_u8 = 0;
 62e:	d1 2c       	mov	r13, r1
 630:	0a c0       	rjmp	.+20     	; 0x646 <.L66>

00000632 <.L68>:
                    v_numOfDigitsToDisp_u8 = (v_numOfDigitsToDisp_u8 * 10) + (ch-0x30);
 632:	dc 9c       	mul	r13, r12
 634:	e0 0d       	add	r30, r0
 636:	11 24       	eor	r1, r1

00000638 <.LVL177>:
 638:	40 ed       	ldi	r20, 0xD0	; 208
 63a:	d4 2e       	mov	r13, r20

0000063c <.LVL178>:
 63c:	de 0e       	add	r13, r30

0000063e <.LVL179>:
                    ch = *ptr;
 63e:	d7 01       	movw	r26, r14
 640:	11 96       	adiw	r26, 0x01	; 1
 642:	ec 91       	ld	r30, X

00000644 <.LVL180>:
                    ptr++;
 644:	79 01       	movw	r14, r18

00000646 <.L66>:
                while((ch>=0x30) && (ch<=0x39))
 646:	97 01       	movw	r18, r14
 648:	2f 5f       	subi	r18, 0xFF	; 255
 64a:	3f 4f       	sbci	r19, 0xFF	; 255

0000064c <.Loc.381>:
 64c:	80 ed       	ldi	r24, 0xD0	; 208
 64e:	8e 0f       	add	r24, r30

00000650 <.Loc.382>:
 650:	8a 30       	cpi	r24, 0x0A	; 10
 652:	78 f3       	brcs	.-34     	; 0x632 <.L68>

00000654 <.L67>:
            switch(ch)       /* Decode the type of the argument */
 654:	e7 36       	cpi	r30, 0x67	; 103
 656:	6c f5       	brge	.+90     	; 0x6b2 <.L69>
 658:	e3 35       	cpi	r30, 0x53	; 83
 65a:	74 f4       	brge	.+28     	; 0x678 <.L70>
 65c:	e3 34       	cpi	r30, 0x43	; 67
 65e:	c1 f1       	breq	.+112    	; 0x6d0 <.L71>
 660:	ac f4       	brge	.+42     	; 0x68c <.L72>
 662:	e5 32       	cpi	r30, 0x25	; 37
 664:	09 f4       	brne	.+2      	; 0x668 <L0^A+0x2>

00000666 <L0^A>:
 666:	a2 c0       	rjmp	.+324    	; 0x7ac <.L73>
 668:	e2 34       	cpi	r30, 0x42	; 66
 66a:	09 f4       	brne	.+2      	; 0x66e <.L75>

0000066c <L0^A>:
 66c:	93 c0       	rjmp	.+294    	; 0x794 <.L74>

0000066e <.L75>:
    for(ptr = argList; *ptr != '\0'; ptr++)
 66e:	57 01       	movw	r10, r14
 670:	bf ef       	ldi	r27, 0xFF	; 255
 672:	ab 1a       	sub	r10, r27
 674:	bb 0a       	sbc	r11, r27

00000676 <.LVL184>:
 676:	b6 cf       	rjmp	.-148    	; 0x5e4 <.L64>

00000678 <.L70>:
 678:	e3 55       	subi	r30, 0x53	; 83

0000067a <.LVL186>:
 67a:	e4 31       	cpi	r30, 0x14	; 20
 67c:	c0 f7       	brcc	.-16     	; 0x66e <.L75>
 67e:	0e 2e       	mov	r0, r30
 680:	00 0c       	add	r0, r0
 682:	ff 0b       	sbc	r31, r31

00000684 <.Loc.389>:
 684:	eb 50       	subi	r30, 0x0B	; 11
 686:	f9 4f       	sbci	r31, 0xF9	; 249

00000688 <.LVL187>:
 688:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__tablejump2__>

0000068c <.L72>:
            switch(ch)       /* Decode the type of the argument */
 68c:	e4 34       	cpi	r30, 0x44	; 68
 68e:	e1 f1       	breq	.+120    	; 0x708 <.L83>
 690:	e6 34       	cpi	r30, 0x46	; 70
 692:	69 f7       	brne	.-38     	; 0x66e <.L75>

00000694 <.L76>:
                    OLED_DisplayFloatNumber(v_floatNum_f32);
 694:	f8 01       	movw	r30, r16
 696:	81 91       	ld	r24, Z+
 698:	91 91       	ld	r25, Z+
 69a:	a1 91       	ld	r26, Z+
 69c:	b1 91       	ld	r27, Z+

0000069e <.LVL190>:
 69e:	8f 01       	movw	r16, r30
 6a0:	89 83       	std	Y+1, r24	; 0x01
 6a2:	9a 83       	std	Y+2, r25	; 0x02
 6a4:	ab 83       	std	Y+3, r26	; 0x03
 6a6:	bc 83       	std	Y+4, r27	; 0x04
 6a8:	bc 01       	movw	r22, r24
 6aa:	cd 01       	movw	r24, r26
 6ac:	0e 94 78 02 	call	0x4f0	; 0x4f0 <OLED_DisplayFloatNumber>

000006b0 <.LVL191>:
                    break;
 6b0:	de cf       	rjmp	.-68     	; 0x66e <.L75>

000006b2 <.L69>:
            switch(ch)       /* Decode the type of the argument */
 6b2:	e5 37       	cpi	r30, 0x75	; 117
 6b4:	09 f4       	brne	.+2      	; 0x6b8 <L0^A+0x2>

000006b6 <L0^A>:
 6b6:	42 c0       	rjmp	.+132    	; 0x73c <.L84>
 6b8:	e8 37       	cpi	r30, 0x78	; 120
 6ba:	09 f4       	brne	.+2      	; 0x6be <L0^A+0x2>

000006bc <L0^A>:
 6bc:	4d c0       	rjmp	.+154    	; 0x758 <.L85>
 6be:	e3 37       	cpi	r30, 0x73	; 115
 6c0:	b1 f6       	brne	.-84     	; 0x66e <.L75>

000006c2 <.L82>:
                    OLED_DisplayString(str);
 6c2:	d8 01       	movw	r26, r16
 6c4:	8d 91       	ld	r24, X+
 6c6:	9d 91       	ld	r25, X+

000006c8 <.LVL194>:
 6c8:	8d 01       	movw	r16, r26
 6ca:	0e 94 c6 01 	call	0x38c	; 0x38c <OLED_DisplayString>

000006ce <.LVL195>:
                    break;
 6ce:	cf cf       	rjmp	.-98     	; 0x66e <.L75>

000006d0 <.L71>:
                    ch = va_arg(argp, int);
 6d0:	58 01       	movw	r10, r16
 6d2:	b2 e0       	ldi	r27, 0x02	; 2
 6d4:	ab 0e       	add	r10, r27
 6d6:	b1 1c       	adc	r11, r1

000006d8 <.LVL196>:
                    OLED_DisplayChar(ch);
 6d8:	f8 01       	movw	r30, r16
 6da:	80 81       	ld	r24, Z
 6dc:	0e 94 98 01 	call	0x330	; 0x330 <OLED_DisplayChar>

000006e0 <.LVL197>:
                    ch = va_arg(argp, int);
 6e0:	85 01       	movw	r16, r10

000006e2 <.Loc.406>:
                    break;
 6e2:	c5 cf       	rjmp	.-118    	; 0x66e <.L75>

000006e4 <.L78>:
                    v_num_s16 = va_arg(argp, int);
 6e4:	d8 01       	movw	r26, r16
 6e6:	ad 90       	ld	r10, X+
 6e8:	bd 90       	ld	r11, X+

000006ea <.LVL199>:
 6ea:	8d 01       	movw	r16, r26

000006ec <.Loc.410>:
                    if(v_num_s16<0)
 6ec:	b7 fe       	sbrs	r11, 7
 6ee:	06 c0       	rjmp	.+12     	; 0x6fc <.L86>

000006f0 <.Loc.412>:
                        v_num_s16 = -v_num_s16;
 6f0:	b1 94       	neg	r11
 6f2:	a1 94       	neg	r10
 6f4:	b1 08       	sbc	r11, r1

000006f6 <.LVL200>:
                        OLED_DisplayChar('-');
 6f6:	8d e2       	ldi	r24, 0x2D	; 45
 6f8:	0e 94 98 01 	call	0x330	; 0x330 <OLED_DisplayChar>

000006fc <.L86>:
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
 6fc:	a5 01       	movw	r20, r10
 6fe:	bb 0c       	add	r11, r11
 700:	66 0b       	sbc	r22, r22
 702:	77 0b       	sbc	r23, r23

00000704 <.L103>:
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
 704:	2d 2d       	mov	r18, r13
 706:	16 c0       	rjmp	.+44     	; 0x734 <.L104>

00000708 <.L83>:
                    v_num_s32 = va_arg(argp, sint32_t);
 708:	f8 01       	movw	r30, r16

0000070a <.LVL204>:
 70a:	81 90       	ld	r8, Z+
 70c:	91 90       	ld	r9, Z+
 70e:	a1 90       	ld	r10, Z+
 710:	b1 90       	ld	r11, Z+

00000712 <.LVL205>:
 712:	8f 01       	movw	r16, r30

00000714 <.Loc.421>:
                    if(v_num_s32<0)
 714:	b7 fe       	sbrs	r11, 7
 716:	0b c0       	rjmp	.+22     	; 0x72e <.L87>

00000718 <.Loc.423>:
                        v_num_s32 = -v_num_s32;
 718:	b0 94       	com	r11
 71a:	a0 94       	com	r10
 71c:	90 94       	com	r9
 71e:	80 94       	com	r8
 720:	81 1c       	adc	r8, r1
 722:	91 1c       	adc	r9, r1
 724:	a1 1c       	adc	r10, r1
 726:	b1 1c       	adc	r11, r1

00000728 <.LVL206>:
                        OLED_DisplayChar('-');
 728:	8d e2       	ldi	r24, 0x2D	; 45
 72a:	0e 94 98 01 	call	0x330	; 0x330 <OLED_DisplayChar>

0000072e <.L87>:
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
 72e:	2d 2d       	mov	r18, r13
 730:	b5 01       	movw	r22, r10
 732:	a4 01       	movw	r20, r8

00000734 <.L104>:
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
 734:	8a e0       	ldi	r24, 0x0A	; 10

00000736 <.L101>:
                    OLED_DisplayNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToDisp_u8);
 736:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <OLED_DisplayNumber>

0000073a <.LVL209>:
                    break;
 73a:	99 cf       	rjmp	.-206    	; 0x66e <.L75>

0000073c <.L84>:
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
 73c:	d8 01       	movw	r26, r16
 73e:	4d 91       	ld	r20, X+
 740:	5d 91       	ld	r21, X+

00000742 <.LVL211>:
 742:	8d 01       	movw	r16, r26

00000744 <.LVL212>:
 744:	70 e0       	ldi	r23, 0x00	; 0
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	dd cf       	rjmp	.-70     	; 0x704 <.L103>

0000074a <.L81>:
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
 74a:	f8 01       	movw	r30, r16
 74c:	41 91       	ld	r20, Z+
 74e:	51 91       	ld	r21, Z+
 750:	61 91       	ld	r22, Z+
 752:	71 91       	ld	r23, Z+

00000754 <.LVL214>:
 754:	8f 01       	movw	r16, r30
 756:	d6 cf       	rjmp	.-84     	; 0x704 <.L103>

00000758 <.L85>:
                    OLED_DisplayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
 758:	d8 01       	movw	r26, r16
 75a:	4d 91       	ld	r20, X+
 75c:	5d 91       	ld	r21, X+

0000075e <.LVL216>:
 75e:	8d 01       	movw	r16, r26

00000760 <.LVL217>:
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	60 e0       	ldi	r22, 0x00	; 0

00000764 <.L102>:
                    OLED_DisplayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
 764:	2d 2d       	mov	r18, r13
 766:	80 e1       	ldi	r24, 0x10	; 16
 768:	e6 cf       	rjmp	.-52     	; 0x736 <.L101>

0000076a <.L80>:
 76a:	f8 01       	movw	r30, r16
 76c:	41 91       	ld	r20, Z+
 76e:	51 91       	ld	r21, Z+
 770:	61 91       	ld	r22, Z+
 772:	71 91       	ld	r23, Z+

00000774 <.LVL220>:
 774:	8f 01       	movw	r16, r30
 776:	f6 cf       	rjmp	.-20     	; 0x764 <.L102>

00000778 <.L79>:
                    v_num_u16 = va_arg(argp, int);
 778:	d8 01       	movw	r26, r16
 77a:	4d 91       	ld	r20, X+
 77c:	5d 91       	ld	r21, X+

0000077e <.LVL222>:
 77e:	8d 01       	movw	r16, r26

00000780 <.LVL223>:
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
 780:	bf ef       	ldi	r27, 0xFF	; 255
 782:	db 12       	cpse	r13, r27
 784:	02 c0       	rjmp	.+4      	; 0x78a <.L88>

00000786 <.Loc.450>:
                        v_numOfDigitsToDisp_u8 = 16;
 786:	90 e1       	ldi	r25, 0x10	; 16
 788:	d9 2e       	mov	r13, r25

0000078a <.L88>:
                    OLED_DisplayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
 78a:	70 e0       	ldi	r23, 0x00	; 0
 78c:	60 e0       	ldi	r22, 0x00	; 0

0000078e <.L89>:
                    OLED_DisplayNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToDisp_u8);
 78e:	2d 2d       	mov	r18, r13
 790:	82 e0       	ldi	r24, 0x02	; 2
 792:	d1 cf       	rjmp	.-94     	; 0x736 <.L101>

00000794 <.L74>:
                    v_num_u32 = va_arg(argp, uint32_t);
 794:	f8 01       	movw	r30, r16

00000796 <.LVL227>:
 796:	41 91       	ld	r20, Z+
 798:	51 91       	ld	r21, Z+
 79a:	61 91       	ld	r22, Z+
 79c:	71 91       	ld	r23, Z+

0000079e <.LVL228>:
 79e:	8f 01       	movw	r16, r30

000007a0 <.Loc.457>:
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
 7a0:	ff ef       	ldi	r31, 0xFF	; 255
 7a2:	df 12       	cpse	r13, r31
 7a4:	f4 cf       	rjmp	.-24     	; 0x78e <.L89>

000007a6 <.Loc.459>:
                        v_numOfDigitsToDisp_u8 = 16;
 7a6:	80 e1       	ldi	r24, 0x10	; 16
 7a8:	d8 2e       	mov	r13, r24

000007aa <.LVL229>:
 7aa:	f1 cf       	rjmp	.-30     	; 0x78e <.L89>

000007ac <.L73>:
                    OLED_DisplayChar('%');
 7ac:	85 e2       	ldi	r24, 0x25	; 37
 7ae:	0e 94 98 01 	call	0x330	; 0x330 <OLED_DisplayChar>

000007b2 <.LVL231>:
                    break;
 7b2:	5d cf       	rjmp	.-326    	; 0x66e <.L75>

000007b4 <.L65>:
            OLED_DisplayChar(ch);
 7b4:	0e 94 98 01 	call	0x330	; 0x330 <OLED_DisplayChar>

000007b8 <.LVL233>:
 7b8:	75 01       	movw	r14, r10
 7ba:	59 cf       	rjmp	.-334    	; 0x66e <.L75>

000007bc <OLED_VerticalGraph>:
{
 7bc:	ef 92       	push	r14
 7be:	ff 92       	push	r15
 7c0:	0f 93       	push	r16
 7c2:	1f 93       	push	r17
 7c4:	cf 93       	push	r28
 7c6:	df 93       	push	r29
 7c8:	d8 2f       	mov	r29, r24
 7ca:	c6 2f       	mov	r28, r22

000007cc <.Loc.467>:
    if((barGraphNumber < C_MaxBarGraphs_U8) && (percentageValue<=100))
 7cc:	85 30       	cpi	r24, 0x05	; 5
 7ce:	d8 f5       	brcc	.+118    	; 0x846 <.L105>

000007d0 <.Loc.471>:
 7d0:	65 36       	cpi	r22, 0x65	; 101
 7d2:	c8 f5       	brcc	.+114    	; 0x846 <.L105>

000007d4 <.Loc.472>:
        barGraphPosition = barGraphNumber * 32;
 7d4:	d2 95       	swap	r29
 7d6:	dd 0f       	add	r29, r29
 7d8:	d0 7e       	andi	r29, 0xE0	; 224

000007da <.LVL235>:
        OLED_SetCursor(0,barGraphPosition+8);
 7da:	68 e0       	ldi	r22, 0x08	; 8

000007dc <.LVL236>:
 7dc:	6d 0f       	add	r22, r29
 7de:	80 e0       	ldi	r24, 0x00	; 0

000007e0 <.LVL237>:
 7e0:	0e 94 1a 01 	call	0x234	; 0x234 <OLED_SetCursor>

000007e4 <.LVL238>:
        OLED_DisplayNumber(E_DECIMAL,percentageValue,3);
 7e4:	4c 2f       	mov	r20, r28
 7e6:	50 e0       	ldi	r21, 0x00	; 0
 7e8:	70 e0       	ldi	r23, 0x00	; 0
 7ea:	60 e0       	ldi	r22, 0x00	; 0
 7ec:	23 e0       	ldi	r18, 0x03	; 3
 7ee:	8a e0       	ldi	r24, 0x0A	; 10
 7f0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <OLED_DisplayNumber>

000007f4 <.LVL239>:
        lineNumberToStartDisplay = (percentageValue>>3);
 7f4:	8c 2f       	mov	r24, r28
 7f6:	82 95       	swap	r24
 7f8:	8f 70       	andi	r24, 0x0F	; 15

000007fa <.Loc.482>:
        lineNumber = 7-lineNumberToStartDisplay;
 7fa:	07 e0       	ldi	r16, 0x07	; 7
 7fc:	08 1b       	sub	r16, r24

000007fe <.LVL240>:
        percentageValue = percentageValue/2;
 7fe:	c6 95       	lsr	r28

00000800 <.LVL241>:
                valueToDisplay = util_GetMod8(percentageValue,8);
 800:	c7 70       	andi	r28, 0x07	; 7

00000802 <.LVL242>:
                valueToDisplay = (0xff<<(8-valueToDisplay));
 802:	88 e0       	ldi	r24, 0x08	; 8
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	8c 1b       	sub	r24, r28
 808:	91 09       	sbc	r25, r1

0000080a <.Loc.488>:
 80a:	1f ef       	ldi	r17, 0xFF	; 255
 80c:	01 c0       	rjmp	.+2      	; 0x810 <.L2^B2>

0000080e <.L1^B4>:
 80e:	11 0f       	add	r17, r17

00000810 <.L2^B2>:
 810:	8a 95       	dec	r24
 812:	ea f7       	brpl	.-6      	; 0x80e <.L1^B4>

00000814 <.Loc.489>:
        for(i=1;i<8;i++)
 814:	c1 e0       	ldi	r28, 0x01	; 1

00000816 <.Loc.490>:
            OLED_SetCursor(i,(barGraphPosition+12));
 816:	d4 5f       	subi	r29, 0xF4	; 244

00000818 <.L109>:
 818:	6d 2f       	mov	r22, r29
 81a:	8c 2f       	mov	r24, r28
 81c:	0e 94 1a 01 	call	0x234	; 0x234 <OLED_SetCursor>

00000820 <.LVL244>:
                valueToDisplay = 0x00;
 820:	e1 2c       	mov	r14, r1

00000822 <.Loc.494>:
            if(i<lineNumber)
 822:	c0 17       	cp	r28, r16
 824:	28 f0       	brcs	.+10     	; 0x830 <.L107>

00000826 <.Loc.495>:
                valueToDisplay = 0xff;
 826:	ee 24       	eor	r14, r14
 828:	ea 94       	dec	r14

0000082a <.Loc.497>:
            else if(i== lineNumber)
 82a:	0c 13       	cpse	r16, r28
 82c:	01 c0       	rjmp	.+2      	; 0x830 <.L107>

0000082e <.Loc.498>:
                valueToDisplay = (0xff<<(8-valueToDisplay));
 82e:	e1 2e       	mov	r14, r17

00000830 <.L107>:
                valueToDisplay = 0xff;
 830:	8c e0       	ldi	r24, 0x0C	; 12
 832:	f8 2e       	mov	r15, r24

00000834 <.L108>:
    i2c_tx_byte(ch);
 834:	8e 2d       	mov	r24, r14
 836:	0e 94 d6 04 	call	0x9ac	; 0x9ac <i2c_tx_byte>

0000083a <.LBE106>:
            for(j=0;j<12;j++)
 83a:	fa 94       	dec	r15

0000083c <.LVL248>:
 83c:	f1 10       	cpse	r15, r1
 83e:	fa cf       	rjmp	.-12     	; 0x834 <.L108>

00000840 <.Loc.509>:
        for(i=1;i<8;i++)
 840:	cf 5f       	subi	r28, 0xFF	; 255

00000842 <.Loc.511>:
 842:	c8 30       	cpi	r28, 0x08	; 8
 844:	49 f7       	brne	.-46     	; 0x818 <.L109>

00000846 <.L105>:
}
 846:	df 91       	pop	r29
 848:	cf 91       	pop	r28
 84a:	1f 91       	pop	r17
 84c:	0f 91       	pop	r16
 84e:	ff 90       	pop	r15
 850:	ef 90       	pop	r14
 852:	08 95       	ret

00000854 <OLED_HorizontalGraph>:
{
 854:	1f 93       	push	r17
 856:	cf 93       	push	r28
 858:	df 93       	push	r29
 85a:	d6 2f       	mov	r29, r22

0000085c <.LVL252>:
    if((barGraphNumber < C_MaxBarGraphs_U8) && (percentageValue<=100))
 85c:	85 30       	cpi	r24, 0x05	; 5
 85e:	40 f5       	brcc	.+80     	; 0x8b0 <.L114>

00000860 <.Loc.520>:
 860:	65 36       	cpi	r22, 0x65	; 101
 862:	30 f5       	brcc	.+76     	; 0x8b0 <.L114>

00000864 <.Loc.521>:
    lineNumberToStartDisplay = (barGraphNumber * 2)+1;
 864:	88 0f       	add	r24, r24

00000866 <.LVL253>:
 866:	c1 e0       	ldi	r28, 0x01	; 1
 868:	c8 0f       	add	r28, r24

0000086a <.Loc.523>:
        OLED_SetCursor(lineNumberToStartDisplay,0);
 86a:	60 e0       	ldi	r22, 0x00	; 0

0000086c <.LVL254>:
 86c:	8c 2f       	mov	r24, r28

0000086e <.LVL255>:
 86e:	0e 94 1a 01 	call	0x234	; 0x234 <OLED_SetCursor>

00000872 <.LVL256>:
        for(i=0;i<percentageValue;i++)
 872:	10 e0       	ldi	r17, 0x00	; 0

00000874 <.L116>:
 874:	1d 13       	cpse	r17, r29
 876:	12 c0       	rjmp	.+36     	; 0x89c <.L117>
 878:	1d 2f       	mov	r17, r29

0000087a <.L118>:
        for(i=percentageValue;i<100;i++)
 87a:	14 36       	cpi	r17, 0x64	; 100
 87c:	a1 f4       	brne	.+40     	; 0x8a6 <.L119>

0000087e <.Loc.532>:
        OLED_SetCursor(lineNumberToStartDisplay,105);
 87e:	69 e6       	ldi	r22, 0x69	; 105
 880:	8c 2f       	mov	r24, r28
 882:	0e 94 1a 01 	call	0x234	; 0x234 <OLED_SetCursor>

00000886 <.LVL259>:
        OLED_DisplayNumber(E_DECIMAL,percentageValue,3);
 886:	4d 2f       	mov	r20, r29
 888:	50 e0       	ldi	r21, 0x00	; 0
 88a:	70 e0       	ldi	r23, 0x00	; 0
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	23 e0       	ldi	r18, 0x03	; 3
 890:	8a e0       	ldi	r24, 0x0A	; 10

00000892 <.Loc.534>:
}
 892:	df 91       	pop	r29

00000894 <.LVL260>:
 894:	cf 91       	pop	r28
 896:	1f 91       	pop	r17

00000898 <.LVL261>:
        OLED_DisplayNumber(E_DECIMAL,percentageValue,3);
 898:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <OLED_DisplayNumber>

0000089c <.L117>:
    i2c_tx_byte(ch);
 89c:	8f ef       	ldi	r24, 0xFF	; 255
 89e:	0e 94 d6 04 	call	0x9ac	; 0x9ac <i2c_tx_byte>

000008a2 <.LBE108>:
        for(i=0;i<percentageValue;i++)
 8a2:	1f 5f       	subi	r17, 0xFF	; 255

000008a4 <.Loc.543>:
 8a4:	e7 cf       	rjmp	.-50     	; 0x874 <.L116>

000008a6 <.L119>:
    i2c_tx_byte(ch);
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	0e 94 d6 04 	call	0x9ac	; 0x9ac <i2c_tx_byte>

000008ac <.LBE110>:
        for(i=percentageValue;i<100;i++)
 8ac:	1f 5f       	subi	r17, 0xFF	; 255

000008ae <.Loc.550>:
 8ae:	e5 cf       	rjmp	.-54     	; 0x87a <.L118>

000008b0 <.L114>:
}
 8b0:	df 91       	pop	r29
 8b2:	cf 91       	pop	r28
 8b4:	1f 91       	pop	r17
 8b6:	08 95       	ret

000008b8 <OLED_DisplayLogo>:
{
 8b8:	0f 93       	push	r16
 8ba:	1f 93       	push	r17
 8bc:	cf 93       	push	r28
 8be:	df 93       	push	r29
 8c0:	8c 01       	movw	r16, r24

000008c2 <.LBB112>:
    if((lineNumber <= C_OledLastLine_U8) && (cursorPosition <= 127))
 8c2:	60 e0       	ldi	r22, 0x00	; 0
 8c4:	80 e0       	ldi	r24, 0x00	; 0

000008c6 <.LVL271>:
 8c6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <OLED_SetCursor.part.0>

000008ca <.LBE112>:
    oledSendStart(SSD1306_ADDRESS);
 8ca:	8c e3       	ldi	r24, 0x3C	; 60
 8cc:	0e 94 53 00 	call	0xa6	; 0xa6 <oledSendStart>

000008d0 <.LBB114>:
    i2c_tx_byte(ch);
 8d0:	80 e4       	ldi	r24, 0x40	; 64
 8d2:	0e 94 d6 04 	call	0x9ac	; 0x9ac <i2c_tx_byte>

000008d6 <.LBE114>:
    for ( i=0; i<1024; i++)      // Send data
 8d6:	e8 01       	movw	r28, r16
 8d8:	1c 5f       	subi	r17, 0xFC	; 252

000008da <.L121>:
    i2c_tx_byte(ch);
 8da:	89 91       	ld	r24, Y+

000008dc <.LVL276>:
 8dc:	0e 94 d6 04 	call	0x9ac	; 0x9ac <i2c_tx_byte>

000008e0 <.LBE116>:
    for ( i=0; i<1024; i++)      // Send data
 8e0:	c0 17       	cp	r28, r16
 8e2:	d1 07       	cpc	r29, r17
 8e4:	d1 f7       	brne	.-12     	; 0x8da <.L121>

000008e6 <.Loc.575>:
}
 8e6:	df 91       	pop	r29
 8e8:	cf 91       	pop	r28

000008ea <.LVL278>:
 8ea:	1f 91       	pop	r17
 8ec:	0f 91       	pop	r16

000008ee <.LVL279>:
 8ee:	08 95       	ret

000008f0 <OLED_EnableInversion>:
    oledSendCommand(SSD1306_INVERT_DISPLAY);
 8f0:	87 ea       	ldi	r24, 0xA7	; 167
 8f2:	0c 94 60 00 	jmp	0xc0	; 0xc0 <oledSendCommand>

000008f6 <OLED_DisableInversion>:
    oledSendCommand(SSD1306_NORMAL_DISPLAY);
 8f6:	86 ea       	ldi	r24, 0xA6	; 166
 8f8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <oledSendCommand>

000008fc <OLED_SetBrightness>:
{
 8fc:	cf 93       	push	r28
 8fe:	c8 2f       	mov	r28, r24

00000900 <.Loc.584>:
    oledSendCommand(SSD1306_SET_CONTRAST_CONTROL);
 900:	81 e8       	ldi	r24, 0x81	; 129

00000902 <.LVL283>:
 902:	0e 94 60 00 	call	0xc0	; 0xc0 <oledSendCommand>

00000906 <.LVL284>:
    oledSendCommand(brightnessValue);
 906:	8c 2f       	mov	r24, r28

00000908 <.Loc.587>:
}
 908:	cf 91       	pop	r28

0000090a <.LVL285>:
    oledSendCommand(brightnessValue);
 90a:	0c 94 60 00 	jmp	0xc0	; 0xc0 <oledSendCommand>

0000090e <i2c_init>:

static bool masterMode;

void i2c_init(void)
{
    TWSR &= ~((1 << TWPS1) | (1 << TWPS0)); // pre-scalar 1
 90e:	e9 eb       	ldi	r30, 0xB9	; 185
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	80 81       	ld	r24, Z
 914:	8c 7f       	andi	r24, 0xFC	; 252
 916:	80 83       	st	Z, r24

00000918 <.Loc.3>:
    TWBR = ((F_CPU / F_I2C) - 16) / 2; // baud rate factor 12
 918:	88 e4       	ldi	r24, 0x48	; 72
 91a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

0000091e <.Loc.5>:
}
 91e:	08 95       	ret

00000920 <i2c_tx_start>:

uint8_t i2c_tx_start(bool mode)
{
    int8_t status = 0;
    masterMode = mode; // set global state of R/W bit
 920:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <masterMode>

00000924 <.Loc.10>:

    /* clear interrupt flag, issue start command (gain control of bus as
       master), enable I2C (SCL and SDA are automatically reconfigured) */
    TWCR |=  (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 924:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

00000928 <.LVL1>:
 928:	84 6a       	ori	r24, 0xA4	; 164
 92a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

0000092e <.L3>:

    /* wait until start transmitted */
    while (!(TWCR & (1 << TWINT)));
 92e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

00000932 <.Loc.17>:
 932:	87 ff       	sbrs	r24, 7
 934:	fc cf       	rjmp	.-8      	; 0x92e <.L3>

00000936 <.Loc.18>:

    switch (TWSR & 0xF8) {
 936:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 93a:	88 7f       	andi	r24, 0xF8	; 248

0000093c <.Loc.20>:
 93c:	88 30       	cpi	r24, 0x08	; 8
 93e:	11 f0       	breq	.+4      	; 0x944 <.L5>
 940:	80 31       	cpi	r24, 0x10	; 16
 942:	11 f4       	brne	.+4      	; 0x948 <.L6>

00000944 <.L5>:
        /* start condition sent from master */
        case 0x08:
            status = TRANSMISSION_SUCCESS;
 944:	8f ef       	ldi	r24, 0xFF	; 255
 946:	08 95       	ret

00000948 <.L6>:
    switch (TWSR & 0xF8) {
 948:	8e ef       	ldi	r24, 0xFE	; 254

0000094a <.LVL3>:
            status = TRANSMISSION_ERROR;
            break;
    }

    return status;
}
 94a:	08 95       	ret

0000094c <i2c_tx_address>:

uint8_t i2c_tx_address(uint8_t address)
{
    int8_t status = 0;

    TWDR = (address << 1) | masterMode;
 94c:	88 0f       	add	r24, r24

0000094e <.LVL5>:
 94e:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <masterMode>
 952:	89 2b       	or	r24, r25

00000954 <.Loc.30>:
 954:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

00000958 <.Loc.31>:
    /* clear start command to release bus as master */
    TWCR &= ~(1 << TWSTA);
 958:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 95c:	8f 7d       	andi	r24, 0xDF	; 223
 95e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

00000962 <.Loc.33>:
    /* clear interrupt flag */
    TWCR |=  (1 << TWINT);
 962:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 966:	80 68       	ori	r24, 0x80	; 128
 968:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

0000096c <.L9>:

    /* wait until address transmitted */
    while (!(TWCR & (1 << TWINT)));
 96c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

00000970 <.Loc.39>:
 970:	87 ff       	sbrs	r24, 7
 972:	fc cf       	rjmp	.-8      	; 0x96c <.L9>

00000974 <.Loc.40>:

    if (masterMode == MASTER_TRANSMITTER) {
 974:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <masterMode>

00000978 <.Loc.42>:
 978:	81 11       	cpse	r24, r1
 97a:	07 c0       	rjmp	.+14     	; 0x98a <.L10>

0000097c <.Loc.43>:
        switch (TWSR & 0xF8) {
 97c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

00000980 <.Loc.45>:
 980:	88 7f       	andi	r24, 0xF8	; 248
 982:	88 31       	cpi	r24, 0x18	; 24
 984:	79 f0       	breq	.+30     	; 0x9a4 <.L12>

00000986 <.L14>:
            default:
                status = TRANSMISSION_ERROR;
                break;
        }
    } else if (masterMode == MASTER_RECEIVER) {
        switch (TWSR & 0xF8) {
 986:	8e ef       	ldi	r24, 0xFE	; 254

00000988 <.LVL6>:
                break;
        }
    }

    return status;
}
 988:	08 95       	ret

0000098a <.L10>:
    } else if (masterMode == MASTER_RECEIVER) {
 98a:	81 30       	cpi	r24, 0x01	; 1
 98c:	69 f4       	brne	.+26     	; 0x9a8 <.L13>

0000098e <.Loc.51>:
        switch (TWSR & 0xF8) {
 98e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 992:	e8 7f       	andi	r30, 0xF8	; 248
 994:	e8 53       	subi	r30, 0x38	; 56
 996:	e1 31       	cpi	r30, 0x11	; 17
 998:	b0 f7       	brcc	.-20     	; 0x986 <.L14>
 99a:	f0 e0       	ldi	r31, 0x00	; 0
 99c:	e4 51       	subi	r30, 0x14	; 20
 99e:	fd 4f       	sbci	r31, 0xFD	; 253
 9a0:	80 81       	ld	r24, Z
 9a2:	08 95       	ret

000009a4 <.L12>:
                status = TRANSMISSION_SUCCESS;
 9a4:	8f ef       	ldi	r24, 0xFF	; 255
 9a6:	08 95       	ret

000009a8 <.L13>:
    int8_t status = 0;
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	08 95       	ret

000009ac <i2c_tx_byte>:

uint8_t i2c_tx_byte(uint8_t byteData)
{
    int8_t status = 0;
    TWDR  = byteData; // load data buffer with data to be transmitted
 9ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

000009b0 <.Loc.59>:
    TWCR |= (1 << TWINT); // clear interrupt flag
 9b0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

000009b4 <.LVL9>:
 9b4:	80 68       	ori	r24, 0x80	; 128
 9b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

000009ba <.L17>:

    /* wait until data transmitted */
    while (!(TWCR & (1 << TWINT)));
 9ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

000009be <.Loc.66>:
 9be:	87 ff       	sbrs	r24, 7
 9c0:	fc cf       	rjmp	.-8      	; 0x9ba <.L17>

000009c2 <.Loc.67>:

    /* retrieve transmission status codes */
    switch (TWSR & 0xF8) {
 9c2:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 9c6:	e8 7f       	andi	r30, 0xF8	; 248
 9c8:	e8 52       	subi	r30, 0x28	; 40
 9ca:	e1 31       	cpi	r30, 0x11	; 17
 9cc:	28 f4       	brcc	.+10     	; 0x9d8 <.L19>
 9ce:	f0 e0       	ldi	r31, 0x00	; 0
 9d0:	e5 52       	subi	r30, 0x25	; 37
 9d2:	fd 4f       	sbci	r31, 0xFD	; 253
 9d4:	80 81       	ld	r24, Z
 9d6:	08 95       	ret

000009d8 <.L19>:
 9d8:	8e ef       	ldi	r24, 0xFE	; 254

000009da <.LVL11>:
            status = TRANSMISSION_ERROR;
            break;
    }

    return status;
}
 9da:	08 95       	ret

000009dc <i2c_timeout>:
int8_t i2c_timeout(void)
{
    uint8_t time = TIMEOUT;
    int8_t status = BUS_DISCONNECTED;

    while (time-- > 0) {
 9dc:	83 e3       	ldi	r24, 0x33	; 51

000009de <.L22>:
 9de:	81 50       	subi	r24, 0x01	; 1

000009e0 <.LVL14>:
 9e0:	11 f4       	brne	.+4      	; 0x9e6 <.L24>

000009e2 <.Loc.79>:
    int8_t status = BUS_DISCONNECTED;
 9e2:	8c ef       	ldi	r24, 0xFC	; 252

000009e4 <.LVL15>:
 9e4:	08 95       	ret

000009e6 <.L24>:
        /* check to see if bus is ready */
        if ((TWCR & (1 << TWINT))) {
 9e6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

000009ea <.Loc.83>:
 9ea:	97 ff       	sbrs	r25, 7
 9ec:	f8 cf       	rjmp	.-16     	; 0x9de <.L22>

000009ee <.Loc.84>:
            status = BUS_CONNECTED;
 9ee:	8d ef       	ldi	r24, 0xFD	; 253

000009f0 <.LVL17>:
            break;
        }
    }

    return status;
}
 9f0:	08 95       	ret

000009f2 <i2c_rx_byte>:

uint8_t i2c_rx_byte(bool response)
{
    int8_t status;

    if (response == ACK) {
 9f2:	81 11       	cpse	r24, r1
 9f4:	17 c0       	rjmp	.+46     	; 0xa24 <.L27>

000009f6 <.Loc.91>:
        TWCR |= (1 << TWEA); // generate ACK
 9f6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

000009fa <.LVL19>:
 9fa:	80 64       	ori	r24, 0x40	; 64

000009fc <.L33>:
    } else {
        TWCR &= ~(1 << TWEA); // generate NACK
 9fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

00000a00 <.Loc.95>:
    }

    /* clear interrupt flag */
    TWCR |= (1 << TWINT);
 a00:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 a04:	80 68       	ori	r24, 0x80	; 128
 a06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

00000a0a <.Loc.97>:

    /* detect bus time-out */
    if (i2c_timeout() != BUS_DISCONNECTED) {
 a0a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <i2c_timeout>

00000a0e <.LVL20>:
 a0e:	8c 3f       	cpi	r24, 0xFC	; 252
 a10:	39 f0       	breq	.+14     	; 0xa20 <.L32>

00000a12 <.Loc.100>:
        /* retrieve transmission status codes or received data */
        switch (TWSR & 0xF8) {
 a12:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 a16:	88 7f       	andi	r24, 0xF8	; 248

00000a18 <.Loc.102>:
 a18:	80 35       	cpi	r24, 0x50	; 80
 a1a:	41 f0       	breq	.+16     	; 0xa2c <.L31>
 a1c:	88 35       	cpi	r24, 0x58	; 88
 a1e:	31 f0       	breq	.+12     	; 0xa2c <.L31>

00000a20 <.L32>:
            default:
                status = TRANSMISSION_ERROR;
                break;
        }
    } else {
        status = TRANSMISSION_ERROR;
 a20:	8e ef       	ldi	r24, 0xFE	; 254

00000a22 <.LVL21>:
    }

    return status;
}
 a22:	08 95       	ret

00000a24 <.L27>:
        TWCR &= ~(1 << TWEA); // generate NACK
 a24:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

00000a28 <.LVL23>:
 a28:	8f 7b       	andi	r24, 0xBF	; 191
 a2a:	e8 cf       	rjmp	.-48     	; 0x9fc <.L33>

00000a2c <.L31>:
                status = TWDR;
 a2c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

00000a30 <.LVL24>:
                break;
 a30:	08 95       	ret

00000a32 <i2c_tx_stop>:

void i2c_tx_stop(void)
{
    /* clear interrupt flag, issue stop command (cleared automatically) */
    TWCR |= (1 << TWINT) | (1 << TWSTO);
 a32:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 a36:	80 69       	ori	r24, 0x90	; 144
 a38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

00000a3c <.L35>:

    while (!(TWCR & (1 << TWSTO))); // wait until stop transmitted
 a3c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

00000a40 <.Loc.119>:
 a40:	84 ff       	sbrs	r24, 4
 a42:	fc cf       	rjmp	.-8      	; 0xa3c <.L35>

00000a44 <.Loc.120>:
}
 a44:	08 95       	ret

00000a46 <main>:
#include <SSD1306.h>

int main(void) {
      
    OLED_Init();  //initialize the OLED
 a46:	0e 94 a9 00 	call	0x152	; 0x152 <OLED_Init>

00000a4a <.LVL0>:
    OLED_Clear(); //clear the display (for good measure)
 a4a:	0e 94 6e 00 	call	0xdc	; 0xdc <OLED_Clear>

00000a4e <.LVL1>:
    
    while (1) {
        
        OLED_SetCursor(0, 0);        //set the cursor position to (0, 0)
        OLED_Printf("Hello World!"); //Print out some text
 a4e:	cd ef       	ldi	r28, 0xFD	; 253
 a50:	d2 e0       	ldi	r29, 0x02	; 2

00000a52 <.L2>:
        OLED_SetCursor(0, 0);        //set the cursor position to (0, 0)
 a52:	60 e0       	ldi	r22, 0x00	; 0
 a54:	80 e0       	ldi	r24, 0x00	; 0
 a56:	0e 94 1a 01 	call	0x234	; 0x234 <OLED_SetCursor>

00000a5a <.LVL2>:
        OLED_Printf("Hello World!"); //Print out some text
 a5a:	df 93       	push	r29
 a5c:	cf 93       	push	r28
 a5e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <OLED_Printf>

00000a62 <.LVL3>:
 a62:	0f 90       	pop	r0
 a64:	0f 90       	pop	r0
 a66:	f5 cf       	rjmp	.-22     	; 0xa52 <.L2>

00000a68 <__subsf3>:
 a68:	50 58       	subi	r21, 0x80	; 128

00000a6a <__addsf3>:
 a6a:	bb 27       	eor	r27, r27
 a6c:	aa 27       	eor	r26, r26
 a6e:	0e 94 4c 05 	call	0xa98	; 0xa98 <__addsf3x>
 a72:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__fp_round>

00000a76 <.L^B1>:
 a76:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_pscA>
 a7a:	38 f0       	brcs	.+14     	; 0xa8a <.L_nan>
 a7c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fp_pscB>
 a80:	20 f0       	brcs	.+8      	; 0xa8a <.L_nan>
 a82:	39 f4       	brne	.+14     	; 0xa92 <.L_inf>
 a84:	9f 3f       	cpi	r25, 0xFF	; 255
 a86:	19 f4       	brne	.+6      	; 0xa8e <.L_infB>
 a88:	26 f4       	brtc	.+8      	; 0xa92 <.L_inf>

00000a8a <.L_nan>:
 a8a:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__fp_nan>

00000a8e <.L_infB>:
 a8e:	0e f4       	brtc	.+2      	; 0xa92 <.L_inf>
 a90:	e0 95       	com	r30

00000a92 <.L_inf>:
 a92:	e7 fb       	bst	r30, 7
 a94:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__fp_inf>

00000a98 <__addsf3x>:
 a98:	e9 2f       	mov	r30, r25
 a9a:	0e 94 35 06 	call	0xc6a	; 0xc6a <__fp_split3>
 a9e:	58 f3       	brcs	.-42     	; 0xa76 <.L^B1>
 aa0:	ba 17       	cp	r27, r26
 aa2:	62 07       	cpc	r22, r18
 aa4:	73 07       	cpc	r23, r19
 aa6:	84 07       	cpc	r24, r20
 aa8:	95 07       	cpc	r25, r21
 aaa:	20 f0       	brcs	.+8      	; 0xab4 <.L2^B1>
 aac:	79 f4       	brne	.+30     	; 0xacc <.L4^B1>
 aae:	a6 f5       	brtc	.+104    	; 0xb18 <.L_add>
 ab0:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_zero>

00000ab4 <.L2^B1>:
 ab4:	0e f4       	brtc	.+2      	; 0xab8 <.L3^B1>
 ab6:	e0 95       	com	r30

00000ab8 <.L3^B1>:
 ab8:	0b 2e       	mov	r0, r27
 aba:	ba 2f       	mov	r27, r26
 abc:	a0 2d       	mov	r26, r0
 abe:	0b 01       	movw	r0, r22
 ac0:	b9 01       	movw	r22, r18
 ac2:	90 01       	movw	r18, r0
 ac4:	0c 01       	movw	r0, r24
 ac6:	ca 01       	movw	r24, r20
 ac8:	a0 01       	movw	r20, r0
 aca:	11 24       	eor	r1, r1

00000acc <.L4^B1>:
 acc:	ff 27       	eor	r31, r31
 ace:	59 1b       	sub	r21, r25

00000ad0 <.L5^B1>:
 ad0:	99 f0       	breq	.+38     	; 0xaf8 <.L7^B1>
 ad2:	59 3f       	cpi	r21, 0xF9	; 249
 ad4:	50 f4       	brcc	.+20     	; 0xaea <.L6^B1>
 ad6:	50 3e       	cpi	r21, 0xE0	; 224
 ad8:	68 f1       	brcs	.+90     	; 0xb34 <.L_ret>
 ada:	1a 16       	cp	r1, r26
 adc:	f0 40       	sbci	r31, 0x00	; 0
 ade:	a2 2f       	mov	r26, r18
 ae0:	23 2f       	mov	r18, r19
 ae2:	34 2f       	mov	r19, r20
 ae4:	44 27       	eor	r20, r20
 ae6:	58 5f       	subi	r21, 0xF8	; 248
 ae8:	f3 cf       	rjmp	.-26     	; 0xad0 <.L5^B1>

00000aea <.L6^B1>:
 aea:	46 95       	lsr	r20
 aec:	37 95       	ror	r19
 aee:	27 95       	ror	r18
 af0:	a7 95       	ror	r26
 af2:	f0 40       	sbci	r31, 0x00	; 0
 af4:	53 95       	inc	r21
 af6:	c9 f7       	brne	.-14     	; 0xaea <.L6^B1>

00000af8 <.L7^B1>:
 af8:	7e f4       	brtc	.+30     	; 0xb18 <.L_add>
 afa:	1f 16       	cp	r1, r31
 afc:	ba 0b       	sbc	r27, r26
 afe:	62 0b       	sbc	r22, r18
 b00:	73 0b       	sbc	r23, r19
 b02:	84 0b       	sbc	r24, r20
 b04:	ba f0       	brmi	.+46     	; 0xb34 <.L_ret>

00000b06 <.L8^B1>:
 b06:	91 50       	subi	r25, 0x01	; 1
 b08:	a1 f0       	breq	.+40     	; 0xb32 <.L9^B1>
 b0a:	ff 0f       	add	r31, r31
 b0c:	bb 1f       	adc	r27, r27
 b0e:	66 1f       	adc	r22, r22
 b10:	77 1f       	adc	r23, r23
 b12:	88 1f       	adc	r24, r24
 b14:	c2 f7       	brpl	.-16     	; 0xb06 <.L8^B1>
 b16:	0e c0       	rjmp	.+28     	; 0xb34 <.L_ret>

00000b18 <.L_add>:
 b18:	ba 0f       	add	r27, r26
 b1a:	62 1f       	adc	r22, r18
 b1c:	73 1f       	adc	r23, r19
 b1e:	84 1f       	adc	r24, r20
 b20:	48 f4       	brcc	.+18     	; 0xb34 <.L_ret>
 b22:	87 95       	ror	r24
 b24:	77 95       	ror	r23
 b26:	67 95       	ror	r22
 b28:	b7 95       	ror	r27
 b2a:	f7 95       	ror	r31
 b2c:	9e 3f       	cpi	r25, 0xFE	; 254
 b2e:	08 f0       	brcs	.+2      	; 0xb32 <.L9^B1>
 b30:	b0 cf       	rjmp	.-160    	; 0xa92 <.L_inf>

00000b32 <.L9^B1>:
 b32:	93 95       	inc	r25

00000b34 <.L_ret>:
 b34:	88 0f       	add	r24, r24
 b36:	08 f0       	brcs	.+2      	; 0xb3a <.L1^B1>
 b38:	99 27       	eor	r25, r25

00000b3a <.L1^B1>:
 b3a:	ee 0f       	add	r30, r30
 b3c:	97 95       	ror	r25
 b3e:	87 95       	ror	r24
 b40:	08 95       	ret

00000b42 <__fixunssfsi>:
 b42:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__fp_splitA>
 b46:	88 f0       	brcs	.+34     	; 0xb6a <.L_err>
 b48:	9f 57       	subi	r25, 0x7F	; 127
 b4a:	98 f0       	brcs	.+38     	; 0xb72 <.L_zr>
 b4c:	b9 2f       	mov	r27, r25
 b4e:	99 27       	eor	r25, r25
 b50:	b7 51       	subi	r27, 0x17	; 23
 b52:	b0 f0       	brcs	.+44     	; 0xb80 <.L4^B1>
 b54:	e1 f0       	breq	.+56     	; 0xb8e <.L_sign>

00000b56 <.L1^B1>:
 b56:	66 0f       	add	r22, r22
 b58:	77 1f       	adc	r23, r23
 b5a:	88 1f       	adc	r24, r24
 b5c:	99 1f       	adc	r25, r25
 b5e:	1a f0       	brmi	.+6      	; 0xb66 <.L2^B1>
 b60:	ba 95       	dec	r27
 b62:	c9 f7       	brne	.-14     	; 0xb56 <.L1^B1>
 b64:	14 c0       	rjmp	.+40     	; 0xb8e <.L_sign>

00000b66 <.L2^B1>:
 b66:	b1 30       	cpi	r27, 0x01	; 1
 b68:	91 f0       	breq	.+36     	; 0xb8e <.L_sign>

00000b6a <.L_err>:
 b6a:	0e 94 57 06 	call	0xcae	; 0xcae <__fp_zero>
 b6e:	b1 e0       	ldi	r27, 0x01	; 1
 b70:	08 95       	ret

00000b72 <.L_zr>:
 b72:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_zero>

00000b76 <.L3^B1>:
 b76:	67 2f       	mov	r22, r23
 b78:	78 2f       	mov	r23, r24
 b7a:	88 27       	eor	r24, r24
 b7c:	b8 5f       	subi	r27, 0xF8	; 248
 b7e:	39 f0       	breq	.+14     	; 0xb8e <.L_sign>

00000b80 <.L4^B1>:
 b80:	b9 3f       	cpi	r27, 0xF9	; 249
 b82:	cc f3       	brlt	.-14     	; 0xb76 <.L3^B1>

00000b84 <.L5^B1>:
 b84:	86 95       	lsr	r24
 b86:	77 95       	ror	r23
 b88:	67 95       	ror	r22
 b8a:	b3 95       	inc	r27
 b8c:	d9 f7       	brne	.-10     	; 0xb84 <.L5^B1>

00000b8e <.L_sign>:
 b8e:	3e f4       	brtc	.+14     	; 0xb9e <.L6^B1>
 b90:	90 95       	com	r25
 b92:	80 95       	com	r24
 b94:	70 95       	com	r23
 b96:	61 95       	neg	r22
 b98:	7f 4f       	sbci	r23, 0xFF	; 255
 b9a:	8f 4f       	sbci	r24, 0xFF	; 255
 b9c:	9f 4f       	sbci	r25, 0xFF	; 255

00000b9e <.L6^B1>:
 b9e:	08 95       	ret

00000ba0 <__floatunsisf>:
 ba0:	e8 94       	clt
 ba2:	09 c0       	rjmp	.+18     	; 0xbb6 <.L1^B1>

00000ba4 <__floatsisf>:
 ba4:	97 fb       	bst	r25, 7
 ba6:	3e f4       	brtc	.+14     	; 0xbb6 <.L1^B1>
 ba8:	90 95       	com	r25
 baa:	80 95       	com	r24
 bac:	70 95       	com	r23
 bae:	61 95       	neg	r22
 bb0:	7f 4f       	sbci	r23, 0xFF	; 255
 bb2:	8f 4f       	sbci	r24, 0xFF	; 255
 bb4:	9f 4f       	sbci	r25, 0xFF	; 255

00000bb6 <.L1^B1>:
 bb6:	99 23       	and	r25, r25
 bb8:	a9 f0       	breq	.+42     	; 0xbe4 <.L4^B1>
 bba:	f9 2f       	mov	r31, r25
 bbc:	96 e9       	ldi	r25, 0x96	; 150
 bbe:	bb 27       	eor	r27, r27

00000bc0 <.L2^B1>:
 bc0:	93 95       	inc	r25
 bc2:	f6 95       	lsr	r31
 bc4:	87 95       	ror	r24
 bc6:	77 95       	ror	r23
 bc8:	67 95       	ror	r22
 bca:	b7 95       	ror	r27
 bcc:	f1 11       	cpse	r31, r1
 bce:	f8 cf       	rjmp	.-16     	; 0xbc0 <.L2^B1>
 bd0:	fa f4       	brpl	.+62     	; 0xc10 <.L_pack>
 bd2:	bb 0f       	add	r27, r27
 bd4:	11 f4       	brne	.+4      	; 0xbda <.L3^B1>
 bd6:	60 ff       	sbrs	r22, 0
 bd8:	1b c0       	rjmp	.+54     	; 0xc10 <.L_pack>

00000bda <.L3^B1>:
 bda:	6f 5f       	subi	r22, 0xFF	; 255
 bdc:	7f 4f       	sbci	r23, 0xFF	; 255
 bde:	8f 4f       	sbci	r24, 0xFF	; 255
 be0:	9f 4f       	sbci	r25, 0xFF	; 255
 be2:	16 c0       	rjmp	.+44     	; 0xc10 <.L_pack>

00000be4 <.L4^B1>:
 be4:	88 23       	and	r24, r24
 be6:	11 f0       	breq	.+4      	; 0xbec <.L5^B1>
 be8:	96 e9       	ldi	r25, 0x96	; 150
 bea:	11 c0       	rjmp	.+34     	; 0xc0e <.L8^B1>

00000bec <.L5^B1>:
 bec:	77 23       	and	r23, r23
 bee:	21 f0       	breq	.+8      	; 0xbf8 <.L6^B1>
 bf0:	9e e8       	ldi	r25, 0x8E	; 142
 bf2:	87 2f       	mov	r24, r23
 bf4:	76 2f       	mov	r23, r22
 bf6:	05 c0       	rjmp	.+10     	; 0xc02 <.L7^B1>

00000bf8 <.L6^B1>:
 bf8:	66 23       	and	r22, r22
 bfa:	71 f0       	breq	.+28     	; 0xc18 <.L9^B1>
 bfc:	96 e8       	ldi	r25, 0x86	; 134
 bfe:	86 2f       	mov	r24, r22
 c00:	70 e0       	ldi	r23, 0x00	; 0

00000c02 <.L7^B1>:
 c02:	60 e0       	ldi	r22, 0x00	; 0
 c04:	2a f0       	brmi	.+10     	; 0xc10 <.L_pack>

00000c06 <.L10^B1>:
 c06:	9a 95       	dec	r25
 c08:	66 0f       	add	r22, r22
 c0a:	77 1f       	adc	r23, r23
 c0c:	88 1f       	adc	r24, r24

00000c0e <.L8^B1>:
 c0e:	da f7       	brpl	.-10     	; 0xc06 <.L10^B1>

00000c10 <.L_pack>:
 c10:	88 0f       	add	r24, r24
 c12:	96 95       	lsr	r25
 c14:	87 95       	ror	r24
 c16:	97 f9       	bld	r25, 7

00000c18 <.L9^B1>:
 c18:	08 95       	ret

00000c1a <__fp_inf>:
 c1a:	97 f9       	bld	r25, 7
 c1c:	9f 67       	ori	r25, 0x7F	; 127
 c1e:	80 e8       	ldi	r24, 0x80	; 128
 c20:	70 e0       	ldi	r23, 0x00	; 0
 c22:	60 e0       	ldi	r22, 0x00	; 0
 c24:	08 95       	ret

00000c26 <__fp_nan>:
 c26:	9f ef       	ldi	r25, 0xFF	; 255
 c28:	80 ec       	ldi	r24, 0xC0	; 192
 c2a:	08 95       	ret

00000c2c <__fp_pscA>:
 c2c:	00 24       	eor	r0, r0
 c2e:	0a 94       	dec	r0
 c30:	16 16       	cp	r1, r22
 c32:	17 06       	cpc	r1, r23
 c34:	18 06       	cpc	r1, r24
 c36:	09 06       	cpc	r0, r25
 c38:	08 95       	ret

00000c3a <__fp_pscB>:
 c3a:	00 24       	eor	r0, r0
 c3c:	0a 94       	dec	r0
 c3e:	12 16       	cp	r1, r18
 c40:	13 06       	cpc	r1, r19
 c42:	14 06       	cpc	r1, r20
 c44:	05 06       	cpc	r0, r21
 c46:	08 95       	ret

00000c48 <__fp_round>:
 c48:	09 2e       	mov	r0, r25
 c4a:	03 94       	inc	r0
 c4c:	00 0c       	add	r0, r0
 c4e:	11 f4       	brne	.+4      	; 0xc54 <.L1^B1>
 c50:	88 23       	and	r24, r24
 c52:	52 f0       	brmi	.+20     	; 0xc68 <.L3^B1>

00000c54 <.L1^B1>:
 c54:	bb 0f       	add	r27, r27
 c56:	40 f4       	brcc	.+16     	; 0xc68 <.L3^B1>
 c58:	bf 2b       	or	r27, r31
 c5a:	11 f4       	brne	.+4      	; 0xc60 <.L2^B1>
 c5c:	60 ff       	sbrs	r22, 0
 c5e:	04 c0       	rjmp	.+8      	; 0xc68 <.L3^B1>

00000c60 <.L2^B1>:
 c60:	6f 5f       	subi	r22, 0xFF	; 255
 c62:	7f 4f       	sbci	r23, 0xFF	; 255
 c64:	8f 4f       	sbci	r24, 0xFF	; 255
 c66:	9f 4f       	sbci	r25, 0xFF	; 255

00000c68 <.L3^B1>:
 c68:	08 95       	ret

00000c6a <__fp_split3>:
 c6a:	57 fd       	sbrc	r21, 7
 c6c:	90 58       	subi	r25, 0x80	; 128
 c6e:	44 0f       	add	r20, r20
 c70:	55 1f       	adc	r21, r21
 c72:	59 f0       	breq	.+22     	; 0xc8a <.L4^B1>
 c74:	5f 3f       	cpi	r21, 0xFF	; 255
 c76:	71 f0       	breq	.+28     	; 0xc94 <.L5^B1>

00000c78 <.L1^B1>:
 c78:	47 95       	ror	r20

00000c7a <__fp_splitA>:
 c7a:	88 0f       	add	r24, r24
 c7c:	97 fb       	bst	r25, 7
 c7e:	99 1f       	adc	r25, r25
 c80:	61 f0       	breq	.+24     	; 0xc9a <.L6^B1>
 c82:	9f 3f       	cpi	r25, 0xFF	; 255
 c84:	79 f0       	breq	.+30     	; 0xca4 <.L7^B1>

00000c86 <.L3^B1>:
 c86:	87 95       	ror	r24
 c88:	08 95       	ret

00000c8a <.L4^B1>:
 c8a:	12 16       	cp	r1, r18
 c8c:	13 06       	cpc	r1, r19
 c8e:	14 06       	cpc	r1, r20
 c90:	55 1f       	adc	r21, r21
 c92:	f2 cf       	rjmp	.-28     	; 0xc78 <.L1^B1>

00000c94 <.L5^B1>:
 c94:	46 95       	lsr	r20
 c96:	f1 df       	rcall	.-30     	; 0xc7a <__fp_splitA>
 c98:	08 c0       	rjmp	.+16     	; 0xcaa <.L8^B1>

00000c9a <.L6^B1>:
 c9a:	16 16       	cp	r1, r22
 c9c:	17 06       	cpc	r1, r23
 c9e:	18 06       	cpc	r1, r24
 ca0:	99 1f       	adc	r25, r25
 ca2:	f1 cf       	rjmp	.-30     	; 0xc86 <.L3^B1>

00000ca4 <.L7^B1>:
 ca4:	86 95       	lsr	r24
 ca6:	71 05       	cpc	r23, r1
 ca8:	61 05       	cpc	r22, r1

00000caa <.L8^B1>:
 caa:	08 94       	sec
 cac:	08 95       	ret

00000cae <__fp_zero>:
 cae:	e8 94       	clt

00000cb0 <__fp_szero>:
 cb0:	bb 27       	eor	r27, r27
 cb2:	66 27       	eor	r22, r22
 cb4:	77 27       	eor	r23, r23
 cb6:	cb 01       	movw	r24, r22
 cb8:	97 f9       	bld	r25, 7
 cba:	08 95       	ret

00000cbc <__mulsf3>:
 cbc:	0e 94 71 06 	call	0xce2	; 0xce2 <__mulsf3x>
 cc0:	0c 94 24 06 	jmp	0xc48	; 0xc48 <__fp_round>

00000cc4 <.L^B1>:
 cc4:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_pscA>
 cc8:	38 f0       	brcs	.+14     	; 0xcd8 <.L1^B1>
 cca:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fp_pscB>
 cce:	20 f0       	brcs	.+8      	; 0xcd8 <.L1^B1>
 cd0:	95 23       	and	r25, r21
 cd2:	11 f0       	breq	.+4      	; 0xcd8 <.L1^B1>
 cd4:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__fp_inf>

00000cd8 <.L1^B1>:
 cd8:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__fp_nan>

00000cdc <.L2^B1>:
 cdc:	11 24       	eor	r1, r1
 cde:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__fp_szero>

00000ce2 <__mulsf3x>:
 ce2:	0e 94 35 06 	call	0xc6a	; 0xc6a <__fp_split3>
 ce6:	70 f3       	brcs	.-36     	; 0xcc4 <.L^B1>

00000ce8 <__mulsf3_pse>:
 ce8:	95 9f       	mul	r25, r21
 cea:	c1 f3       	breq	.-16     	; 0xcdc <.L2^B1>
 cec:	95 0f       	add	r25, r21
 cee:	50 e0       	ldi	r21, 0x00	; 0
 cf0:	55 1f       	adc	r21, r21
 cf2:	62 9f       	mul	r22, r18
 cf4:	f0 01       	movw	r30, r0
 cf6:	72 9f       	mul	r23, r18
 cf8:	bb 27       	eor	r27, r27
 cfa:	f0 0d       	add	r31, r0
 cfc:	b1 1d       	adc	r27, r1
 cfe:	63 9f       	mul	r22, r19
 d00:	aa 27       	eor	r26, r26
 d02:	f0 0d       	add	r31, r0
 d04:	b1 1d       	adc	r27, r1
 d06:	aa 1f       	adc	r26, r26
 d08:	64 9f       	mul	r22, r20
 d0a:	66 27       	eor	r22, r22
 d0c:	b0 0d       	add	r27, r0
 d0e:	a1 1d       	adc	r26, r1
 d10:	66 1f       	adc	r22, r22
 d12:	82 9f       	mul	r24, r18
 d14:	22 27       	eor	r18, r18
 d16:	b0 0d       	add	r27, r0
 d18:	a1 1d       	adc	r26, r1
 d1a:	62 1f       	adc	r22, r18
 d1c:	73 9f       	mul	r23, r19
 d1e:	b0 0d       	add	r27, r0
 d20:	a1 1d       	adc	r26, r1
 d22:	62 1f       	adc	r22, r18
 d24:	83 9f       	mul	r24, r19
 d26:	a0 0d       	add	r26, r0
 d28:	61 1d       	adc	r22, r1
 d2a:	22 1f       	adc	r18, r18
 d2c:	74 9f       	mul	r23, r20
 d2e:	33 27       	eor	r19, r19
 d30:	a0 0d       	add	r26, r0
 d32:	61 1d       	adc	r22, r1
 d34:	23 1f       	adc	r18, r19
 d36:	84 9f       	mul	r24, r20
 d38:	60 0d       	add	r22, r0
 d3a:	21 1d       	adc	r18, r1
 d3c:	82 2f       	mov	r24, r18
 d3e:	76 2f       	mov	r23, r22
 d40:	6a 2f       	mov	r22, r26
 d42:	11 24       	eor	r1, r1
 d44:	9f 57       	subi	r25, 0x7F	; 127
 d46:	50 40       	sbci	r21, 0x00	; 0
 d48:	9a f0       	brmi	.+38     	; 0xd70 <.L13^B1>
 d4a:	f1 f0       	breq	.+60     	; 0xd88 <.L15^B1>

00000d4c <.L10^B1>:
 d4c:	88 23       	and	r24, r24
 d4e:	4a f0       	brmi	.+18     	; 0xd62 <.L11^B1>
 d50:	ee 0f       	add	r30, r30
 d52:	ff 1f       	adc	r31, r31
 d54:	bb 1f       	adc	r27, r27
 d56:	66 1f       	adc	r22, r22
 d58:	77 1f       	adc	r23, r23
 d5a:	88 1f       	adc	r24, r24
 d5c:	91 50       	subi	r25, 0x01	; 1
 d5e:	50 40       	sbci	r21, 0x00	; 0
 d60:	a9 f7       	brne	.-22     	; 0xd4c <.L10^B1>

00000d62 <.L11^B1>:
 d62:	9e 3f       	cpi	r25, 0xFE	; 254
 d64:	51 05       	cpc	r21, r1
 d66:	80 f0       	brcs	.+32     	; 0xd88 <.L15^B1>
 d68:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__fp_inf>

00000d6c <.L12^B1>:
 d6c:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__fp_szero>

00000d70 <.L13^B1>:
 d70:	5f 3f       	cpi	r21, 0xFF	; 255
 d72:	e4 f3       	brlt	.-8      	; 0xd6c <.L12^B1>
 d74:	98 3e       	cpi	r25, 0xE8	; 232
 d76:	d4 f3       	brlt	.-12     	; 0xd6c <.L12^B1>

00000d78 <.L14^B1>:
 d78:	86 95       	lsr	r24
 d7a:	77 95       	ror	r23
 d7c:	67 95       	ror	r22
 d7e:	b7 95       	ror	r27
 d80:	f7 95       	ror	r31
 d82:	e7 95       	ror	r30
 d84:	9f 5f       	subi	r25, 0xFF	; 255
 d86:	c1 f7       	brne	.-16     	; 0xd78 <.L14^B1>

00000d88 <.L15^B1>:
 d88:	fe 2b       	or	r31, r30
 d8a:	88 0f       	add	r24, r24
 d8c:	91 1d       	adc	r25, r1
 d8e:	96 95       	lsr	r25
 d90:	87 95       	ror	r24
 d92:	97 f9       	bld	r25, 7
 d94:	08 95       	ret

00000d96 <__udivmodsi4>:
 d96:	a1 e2       	ldi	r26, 0x21	; 33

00000d98 <.Loc.1>:
 d98:	1a 2e       	mov	r1, r26

00000d9a <.Loc.2>:
 d9a:	aa 1b       	sub	r26, r26

00000d9c <.Loc.3>:
 d9c:	bb 1b       	sub	r27, r27

00000d9e <.Loc.4>:
 d9e:	fd 01       	movw	r30, r26

00000da0 <.Loc.5>:
 da0:	0d c0       	rjmp	.+26     	; 0xdbc <__udivmodsi4_ep>

00000da2 <__udivmodsi4_loop>:
 da2:	aa 1f       	adc	r26, r26

00000da4 <.Loc.7>:
 da4:	bb 1f       	adc	r27, r27

00000da6 <.Loc.8>:
 da6:	ee 1f       	adc	r30, r30

00000da8 <.Loc.9>:
 da8:	ff 1f       	adc	r31, r31

00000daa <.Loc.10>:
 daa:	a2 17       	cp	r26, r18

00000dac <.Loc.11>:
 dac:	b3 07       	cpc	r27, r19

00000dae <.Loc.12>:
 dae:	e4 07       	cpc	r30, r20

00000db0 <.Loc.13>:
 db0:	f5 07       	cpc	r31, r21

00000db2 <.Loc.14>:
 db2:	20 f0       	brcs	.+8      	; 0xdbc <__udivmodsi4_ep>

00000db4 <.Loc.15>:
 db4:	a2 1b       	sub	r26, r18

00000db6 <.Loc.16>:
 db6:	b3 0b       	sbc	r27, r19

00000db8 <.Loc.17>:
 db8:	e4 0b       	sbc	r30, r20

00000dba <.Loc.18>:
 dba:	f5 0b       	sbc	r31, r21

00000dbc <__udivmodsi4_ep>:
 dbc:	66 1f       	adc	r22, r22

00000dbe <.Loc.20>:
 dbe:	77 1f       	adc	r23, r23

00000dc0 <.Loc.21>:
 dc0:	88 1f       	adc	r24, r24

00000dc2 <.Loc.22>:
 dc2:	99 1f       	adc	r25, r25

00000dc4 <.Loc.23>:
 dc4:	1a 94       	dec	r1

00000dc6 <.Loc.24>:
 dc6:	69 f7       	brne	.-38     	; 0xda2 <__udivmodsi4_loop>

00000dc8 <.Loc.25>:
 dc8:	60 95       	com	r22

00000dca <.Loc.26>:
 dca:	70 95       	com	r23

00000dcc <.Loc.27>:
 dcc:	80 95       	com	r24

00000dce <.Loc.28>:
 dce:	90 95       	com	r25

00000dd0 <.Loc.29>:
 dd0:	9b 01       	movw	r18, r22

00000dd2 <.Loc.30>:
 dd2:	ac 01       	movw	r20, r24

00000dd4 <.Loc.31>:
 dd4:	bd 01       	movw	r22, r26

00000dd6 <.Loc.32>:
 dd6:	cf 01       	movw	r24, r30

00000dd8 <.Loc.33>:
 dd8:	08 95       	ret

00000dda <__tablejump2__>:
 dda:	ee 0f       	add	r30, r30

00000ddc <.Loc.1>:
 ddc:	ff 1f       	adc	r31, r31

00000dde <.Loc.2>:
 dde:	05 90       	lpm	r0, Z+

00000de0 <.Loc.3>:
 de0:	f4 91       	lpm	r31, Z

00000de2 <.Loc.4>:
 de2:	e0 2d       	mov	r30, r0

00000de4 <.Loc.5>:
 de4:	09 94       	ijmp

00000de6 <_exit>:
 de6:	f8 94       	cli

00000de8 <__stop_program>:
 de8:	ff cf       	rjmp	.-2      	; 0xde8 <__stop_program>

00000dea <L0^A>:
 dea:	61 03       	mulsu	r22, r17
 dec:	37 03       	mulsu	r19, r23
 dee:	a5 03       	fmuls	r18, r21
 df0:	37 03       	mulsu	r19, r23
 df2:	37 03       	mulsu	r19, r23
 df4:	b5 03       	fmuls	r19, r21
 df6:	37 03       	mulsu	r19, r23
 df8:	37 03       	mulsu	r19, r23
 dfa:	37 03       	mulsu	r19, r23
 dfc:	37 03       	mulsu	r19, r23
 dfe:	37 03       	mulsu	r19, r23
 e00:	37 03       	mulsu	r19, r23
 e02:	37 03       	mulsu	r19, r23
 e04:	37 03       	mulsu	r19, r23
 e06:	37 03       	mulsu	r19, r23
 e08:	bc 03       	fmulsu	r19, r20
 e0a:	68 03       	fmul	r22, r16
 e0c:	72 03       	mulsu	r23, r18
 e0e:	37 03       	mulsu	r19, r23
 e10:	4a 03       	fmul	r20, r18
